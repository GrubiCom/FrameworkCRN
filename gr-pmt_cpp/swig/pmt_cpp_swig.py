# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.11
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.





from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_pmt_cpp_swig', [dirname(__file__)])
        except ImportError:
            import _pmt_cpp_swig
            return _pmt_cpp_swig
        if fp is not None:
            try:
                _mod = imp.load_module('_pmt_cpp_swig', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _pmt_cpp_swig = swig_import_helper()
    del swig_import_helper
else:
    import _pmt_cpp_swig
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


def _swig_setattr_nondynamic_method(set):
    def set_attr(self,name,value):
        if (name == "thisown"): return self.this.own(value)
        if hasattr(self,name) or (name == "this"):
            set(self,name,value)
        else:
            raise AttributeError("You cannot add attributes to %s" % self)
    return set_attr



def high_res_timer_now():
  """high_res_timer_now() -> gr::high_res_timer_type"""
  return _pmt_cpp_swig.high_res_timer_now()

def high_res_timer_now_perfmon():
  """high_res_timer_now_perfmon() -> gr::high_res_timer_type"""
  return _pmt_cpp_swig.high_res_timer_now_perfmon()

def high_res_timer_tps():
  """high_res_timer_tps() -> gr::high_res_timer_type"""
  return _pmt_cpp_swig.high_res_timer_tps()

def high_res_timer_epoch():
  """high_res_timer_epoch() -> gr::high_res_timer_type"""
  return _pmt_cpp_swig.high_res_timer_epoch()
class pmt_extract(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> pmt_extract_sptr

        Return a shared_ptr to a new instance of pmt_cpp::pmt_extract.

        To avoid accidental use of raw pointers, pmt_cpp::pmt_extract's constructor is in a private implementation class. pmt_cpp::pmt_extract::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.pmt_extract_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_pmt_extract
    __del__ = lambda self : None;
pmt_extract_swigregister = _pmt_cpp_swig.pmt_extract_swigregister
pmt_extract_swigregister(pmt_extract)

def pmt_extract_make():
  """
    pmt_extract_make() -> pmt_extract_sptr

    Return a shared_ptr to a new instance of pmt_cpp::pmt_extract.

    To avoid accidental use of raw pointers, pmt_cpp::pmt_extract's constructor is in a private implementation class. pmt_cpp::pmt_extract::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.pmt_extract_make()

class pmt_extract_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::pmt_extract)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::pmt_extract)> self) -> pmt_extract_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::pmt_extract)> self, pmt_extract p) -> pmt_extract_sptr
        """
        this = _pmt_cpp_swig.new_pmt_extract_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pmt_extract_sptr self) -> pmt_extract"""
        return _pmt_cpp_swig.pmt_extract_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_pmt_extract_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(pmt_extract_sptr self) -> pmt_extract_sptr

        Return a shared_ptr to a new instance of pmt_cpp::pmt_extract.

        To avoid accidental use of raw pointers, pmt_cpp::pmt_extract's constructor is in a private implementation class. pmt_cpp::pmt_extract::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.pmt_extract_sptr_make(self)

    def history(self):
        """history(pmt_extract_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.pmt_extract_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pmt_extract_sptr self, int which, int delay)
        declare_sample_delay(pmt_extract_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.pmt_extract_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pmt_extract_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.pmt_extract_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pmt_extract_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pmt_extract_sptr self) -> double"""
        return _pmt_cpp_swig.pmt_extract_sptr_relative_rate(self)

    def start(self):
        """start(pmt_extract_sptr self) -> bool"""
        return _pmt_cpp_swig.pmt_extract_sptr_start(self)

    def stop(self):
        """stop(pmt_extract_sptr self) -> bool"""
        return _pmt_cpp_swig.pmt_extract_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pmt_extract_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.pmt_extract_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pmt_extract_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.pmt_extract_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pmt_extract_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pmt_extract_sptr self, int m)"""
        return _pmt_cpp_swig.pmt_extract_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pmt_extract_sptr self)"""
        return _pmt_cpp_swig.pmt_extract_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pmt_extract_sptr self) -> bool"""
        return _pmt_cpp_swig.pmt_extract_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pmt_extract_sptr self, int m)"""
        return _pmt_cpp_swig.pmt_extract_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pmt_extract_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pmt_extract_sptr self, int i) -> long"""
        return _pmt_cpp_swig.pmt_extract_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pmt_extract_sptr self, long max_output_buffer)
        set_max_output_buffer(pmt_extract_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.pmt_extract_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pmt_extract_sptr self, int i) -> long"""
        return _pmt_cpp_swig.pmt_extract_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pmt_extract_sptr self, long min_output_buffer)
        set_min_output_buffer(pmt_extract_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.pmt_extract_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pmt_extract_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pmt_extract_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pmt_extract_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pmt_extract_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pmt_extract_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pmt_extract_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pmt_extract_sptr self, int which) -> float
        pc_input_buffers_full(pmt_extract_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pmt_extract_sptr self, int which) -> float
        pc_input_buffers_full_avg(pmt_extract_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pmt_extract_sptr self, int which) -> float
        pc_input_buffers_full_var(pmt_extract_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pmt_extract_sptr self, int which) -> float
        pc_output_buffers_full(pmt_extract_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pmt_extract_sptr self, int which) -> float
        pc_output_buffers_full_avg(pmt_extract_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pmt_extract_sptr self, int which) -> float
        pc_output_buffers_full_var(pmt_extract_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pmt_extract_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pmt_extract_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pmt_extract_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pmt_extract_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(pmt_extract_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pmt_extract_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.pmt_extract_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pmt_extract_sptr self)"""
        return _pmt_cpp_swig.pmt_extract_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pmt_extract_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.pmt_extract_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pmt_extract_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pmt_extract_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pmt_extract_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.pmt_extract_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pmt_extract_sptr self) -> std::string"""
        return _pmt_cpp_swig.pmt_extract_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pmt_extract_sptr self) -> std::string"""
        return _pmt_cpp_swig.pmt_extract_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pmt_extract_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.pmt_extract_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pmt_extract_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.pmt_extract_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pmt_extract_sptr self) -> long"""
        return _pmt_cpp_swig.pmt_extract_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pmt_extract_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.pmt_extract_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pmt_extract_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.pmt_extract_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pmt_extract_sptr self) -> std::string"""
        return _pmt_cpp_swig.pmt_extract_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pmt_extract_sptr self, std::string name)"""
        return _pmt_cpp_swig.pmt_extract_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pmt_extract_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.pmt_extract_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pmt_extract_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.pmt_extract_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pmt_extract_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.pmt_extract_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pmt_extract_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.pmt_extract_sptr_message_subscribers(self, *args, **kwargs)

pmt_extract_sptr_swigregister = _pmt_cpp_swig.pmt_extract_sptr_swigregister
pmt_extract_sptr_swigregister(pmt_extract_sptr)

pmt_extract_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pmt_extract = pmt_extract.make;

class message_type(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> message_type_sptr

        Return a shared_ptr to a new instance of pmt_cpp::message_type.

        To avoid accidental use of raw pointers, pmt_cpp::message_type's constructor is in a private implementation class. pmt_cpp::message_type::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.message_type_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_message_type
    __del__ = lambda self : None;
message_type_swigregister = _pmt_cpp_swig.message_type_swigregister
message_type_swigregister(message_type)

def message_type_make():
  """
    message_type_make() -> message_type_sptr

    Return a shared_ptr to a new instance of pmt_cpp::message_type.

    To avoid accidental use of raw pointers, pmt_cpp::message_type's constructor is in a private implementation class. pmt_cpp::message_type::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.message_type_make()

class message_type_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::message_type)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::message_type)> self) -> message_type_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::message_type)> self, message_type p) -> message_type_sptr
        """
        this = _pmt_cpp_swig.new_message_type_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(message_type_sptr self) -> message_type"""
        return _pmt_cpp_swig.message_type_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_message_type_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(message_type_sptr self) -> message_type_sptr

        Return a shared_ptr to a new instance of pmt_cpp::message_type.

        To avoid accidental use of raw pointers, pmt_cpp::message_type's constructor is in a private implementation class. pmt_cpp::message_type::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.message_type_sptr_make(self)

    def history(self):
        """history(message_type_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.message_type_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(message_type_sptr self, int which, int delay)
        declare_sample_delay(message_type_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.message_type_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(message_type_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.message_type_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(message_type_sptr self) -> int"""
        return _pmt_cpp_swig.message_type_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(message_type_sptr self) -> double"""
        return _pmt_cpp_swig.message_type_sptr_relative_rate(self)

    def start(self):
        """start(message_type_sptr self) -> bool"""
        return _pmt_cpp_swig.message_type_sptr_start(self)

    def stop(self):
        """stop(message_type_sptr self) -> bool"""
        return _pmt_cpp_swig.message_type_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(message_type_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.message_type_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(message_type_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.message_type_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(message_type_sptr self) -> int"""
        return _pmt_cpp_swig.message_type_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(message_type_sptr self, int m)"""
        return _pmt_cpp_swig.message_type_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(message_type_sptr self)"""
        return _pmt_cpp_swig.message_type_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(message_type_sptr self) -> bool"""
        return _pmt_cpp_swig.message_type_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(message_type_sptr self, int m)"""
        return _pmt_cpp_swig.message_type_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(message_type_sptr self) -> int"""
        return _pmt_cpp_swig.message_type_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(message_type_sptr self, int i) -> long"""
        return _pmt_cpp_swig.message_type_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(message_type_sptr self, long max_output_buffer)
        set_max_output_buffer(message_type_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.message_type_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(message_type_sptr self, int i) -> long"""
        return _pmt_cpp_swig.message_type_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(message_type_sptr self, long min_output_buffer)
        set_min_output_buffer(message_type_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.message_type_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(message_type_sptr self) -> float"""
        return _pmt_cpp_swig.message_type_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(message_type_sptr self) -> float"""
        return _pmt_cpp_swig.message_type_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(message_type_sptr self) -> float"""
        return _pmt_cpp_swig.message_type_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(message_type_sptr self) -> float"""
        return _pmt_cpp_swig.message_type_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(message_type_sptr self) -> float"""
        return _pmt_cpp_swig.message_type_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(message_type_sptr self) -> float"""
        return _pmt_cpp_swig.message_type_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(message_type_sptr self, int which) -> float
        pc_input_buffers_full(message_type_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.message_type_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(message_type_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_type_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.message_type_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(message_type_sptr self, int which) -> float
        pc_input_buffers_full_var(message_type_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.message_type_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(message_type_sptr self, int which) -> float
        pc_output_buffers_full(message_type_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.message_type_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(message_type_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_type_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.message_type_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(message_type_sptr self, int which) -> float
        pc_output_buffers_full_var(message_type_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.message_type_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(message_type_sptr self) -> float"""
        return _pmt_cpp_swig.message_type_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(message_type_sptr self) -> float"""
        return _pmt_cpp_swig.message_type_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(message_type_sptr self) -> float"""
        return _pmt_cpp_swig.message_type_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(message_type_sptr self) -> float"""
        return _pmt_cpp_swig.message_type_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(message_type_sptr self) -> float"""
        return _pmt_cpp_swig.message_type_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(message_type_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.message_type_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(message_type_sptr self)"""
        return _pmt_cpp_swig.message_type_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(message_type_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.message_type_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(message_type_sptr self) -> int"""
        return _pmt_cpp_swig.message_type_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(message_type_sptr self) -> int"""
        return _pmt_cpp_swig.message_type_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(message_type_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.message_type_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(message_type_sptr self) -> std::string"""
        return _pmt_cpp_swig.message_type_sptr_name(self)

    def symbol_name(self):
        """symbol_name(message_type_sptr self) -> std::string"""
        return _pmt_cpp_swig.message_type_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(message_type_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.message_type_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(message_type_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.message_type_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(message_type_sptr self) -> long"""
        return _pmt_cpp_swig.message_type_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(message_type_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.message_type_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(message_type_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.message_type_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(message_type_sptr self) -> std::string"""
        return _pmt_cpp_swig.message_type_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(message_type_sptr self, std::string name)"""
        return _pmt_cpp_swig.message_type_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(message_type_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.message_type_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(message_type_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.message_type_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(message_type_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.message_type_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(message_type_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.message_type_sptr_message_subscribers(self, *args, **kwargs)

message_type_sptr_swigregister = _pmt_cpp_swig.message_type_sptr_swigregister
message_type_sptr_swigregister(message_type_sptr)

message_type_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_type = message_type.make;

class pmt_extract2(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> pmt_extract2_sptr

        Return a shared_ptr to a new instance of pmt_cpp::pmt_extract2.

        To avoid accidental use of raw pointers, pmt_cpp::pmt_extract2's constructor is in a private implementation class. pmt_cpp::pmt_extract2::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.pmt_extract2_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_pmt_extract2
    __del__ = lambda self : None;
pmt_extract2_swigregister = _pmt_cpp_swig.pmt_extract2_swigregister
pmt_extract2_swigregister(pmt_extract2)

def pmt_extract2_make():
  """
    pmt_extract2_make() -> pmt_extract2_sptr

    Return a shared_ptr to a new instance of pmt_cpp::pmt_extract2.

    To avoid accidental use of raw pointers, pmt_cpp::pmt_extract2's constructor is in a private implementation class. pmt_cpp::pmt_extract2::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.pmt_extract2_make()

class pmt_extract2_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::pmt_extract2)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::pmt_extract2)> self) -> pmt_extract2_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::pmt_extract2)> self, pmt_extract2 p) -> pmt_extract2_sptr
        """
        this = _pmt_cpp_swig.new_pmt_extract2_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pmt_extract2_sptr self) -> pmt_extract2"""
        return _pmt_cpp_swig.pmt_extract2_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_pmt_extract2_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(pmt_extract2_sptr self) -> pmt_extract2_sptr

        Return a shared_ptr to a new instance of pmt_cpp::pmt_extract2.

        To avoid accidental use of raw pointers, pmt_cpp::pmt_extract2's constructor is in a private implementation class. pmt_cpp::pmt_extract2::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.pmt_extract2_sptr_make(self)

    def history(self):
        """history(pmt_extract2_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.pmt_extract2_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pmt_extract2_sptr self, int which, int delay)
        declare_sample_delay(pmt_extract2_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.pmt_extract2_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pmt_extract2_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.pmt_extract2_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pmt_extract2_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract2_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pmt_extract2_sptr self) -> double"""
        return _pmt_cpp_swig.pmt_extract2_sptr_relative_rate(self)

    def start(self):
        """start(pmt_extract2_sptr self) -> bool"""
        return _pmt_cpp_swig.pmt_extract2_sptr_start(self)

    def stop(self):
        """stop(pmt_extract2_sptr self) -> bool"""
        return _pmt_cpp_swig.pmt_extract2_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pmt_extract2_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.pmt_extract2_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pmt_extract2_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.pmt_extract2_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pmt_extract2_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract2_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pmt_extract2_sptr self, int m)"""
        return _pmt_cpp_swig.pmt_extract2_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pmt_extract2_sptr self)"""
        return _pmt_cpp_swig.pmt_extract2_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pmt_extract2_sptr self) -> bool"""
        return _pmt_cpp_swig.pmt_extract2_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pmt_extract2_sptr self, int m)"""
        return _pmt_cpp_swig.pmt_extract2_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pmt_extract2_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract2_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pmt_extract2_sptr self, int i) -> long"""
        return _pmt_cpp_swig.pmt_extract2_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pmt_extract2_sptr self, long max_output_buffer)
        set_max_output_buffer(pmt_extract2_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.pmt_extract2_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pmt_extract2_sptr self, int i) -> long"""
        return _pmt_cpp_swig.pmt_extract2_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pmt_extract2_sptr self, long min_output_buffer)
        set_min_output_buffer(pmt_extract2_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.pmt_extract2_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pmt_extract2_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pmt_extract2_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pmt_extract2_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pmt_extract2_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pmt_extract2_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pmt_extract2_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pmt_extract2_sptr self, int which) -> float
        pc_input_buffers_full(pmt_extract2_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pmt_extract2_sptr self, int which) -> float
        pc_input_buffers_full_avg(pmt_extract2_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pmt_extract2_sptr self, int which) -> float
        pc_input_buffers_full_var(pmt_extract2_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pmt_extract2_sptr self, int which) -> float
        pc_output_buffers_full(pmt_extract2_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pmt_extract2_sptr self, int which) -> float
        pc_output_buffers_full_avg(pmt_extract2_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pmt_extract2_sptr self, int which) -> float
        pc_output_buffers_full_var(pmt_extract2_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pmt_extract2_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pmt_extract2_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pmt_extract2_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pmt_extract2_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(pmt_extract2_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract2_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pmt_extract2_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.pmt_extract2_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pmt_extract2_sptr self)"""
        return _pmt_cpp_swig.pmt_extract2_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pmt_extract2_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.pmt_extract2_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pmt_extract2_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract2_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pmt_extract2_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract2_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pmt_extract2_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.pmt_extract2_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pmt_extract2_sptr self) -> std::string"""
        return _pmt_cpp_swig.pmt_extract2_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pmt_extract2_sptr self) -> std::string"""
        return _pmt_cpp_swig.pmt_extract2_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pmt_extract2_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.pmt_extract2_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pmt_extract2_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.pmt_extract2_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pmt_extract2_sptr self) -> long"""
        return _pmt_cpp_swig.pmt_extract2_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pmt_extract2_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.pmt_extract2_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pmt_extract2_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.pmt_extract2_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pmt_extract2_sptr self) -> std::string"""
        return _pmt_cpp_swig.pmt_extract2_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pmt_extract2_sptr self, std::string name)"""
        return _pmt_cpp_swig.pmt_extract2_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pmt_extract2_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.pmt_extract2_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pmt_extract2_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.pmt_extract2_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pmt_extract2_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.pmt_extract2_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pmt_extract2_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.pmt_extract2_sptr_message_subscribers(self, *args, **kwargs)

pmt_extract2_sptr_swigregister = _pmt_cpp_swig.pmt_extract2_sptr_swigregister
pmt_extract2_sptr_swigregister(pmt_extract2_sptr)

pmt_extract2_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pmt_extract2 = pmt_extract2.make;

class start_sense(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> start_sense_sptr

        Return a shared_ptr to a new instance of pmt_cpp::start_sense.

        To avoid accidental use of raw pointers, pmt_cpp::start_sense's constructor is in a private implementation class. pmt_cpp::start_sense::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.start_sense_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_start_sense
    __del__ = lambda self : None;
start_sense_swigregister = _pmt_cpp_swig.start_sense_swigregister
start_sense_swigregister(start_sense)

def start_sense_make():
  """
    start_sense_make() -> start_sense_sptr

    Return a shared_ptr to a new instance of pmt_cpp::start_sense.

    To avoid accidental use of raw pointers, pmt_cpp::start_sense's constructor is in a private implementation class. pmt_cpp::start_sense::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.start_sense_make()

class start_sense_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::start_sense)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::start_sense)> self) -> start_sense_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::start_sense)> self, start_sense p) -> start_sense_sptr
        """
        this = _pmt_cpp_swig.new_start_sense_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(start_sense_sptr self) -> start_sense"""
        return _pmt_cpp_swig.start_sense_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_start_sense_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(start_sense_sptr self) -> start_sense_sptr

        Return a shared_ptr to a new instance of pmt_cpp::start_sense.

        To avoid accidental use of raw pointers, pmt_cpp::start_sense's constructor is in a private implementation class. pmt_cpp::start_sense::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.start_sense_sptr_make(self)

    def history(self):
        """history(start_sense_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.start_sense_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(start_sense_sptr self, int which, int delay)
        declare_sample_delay(start_sense_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.start_sense_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(start_sense_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.start_sense_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(start_sense_sptr self) -> int"""
        return _pmt_cpp_swig.start_sense_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(start_sense_sptr self) -> double"""
        return _pmt_cpp_swig.start_sense_sptr_relative_rate(self)

    def start(self):
        """start(start_sense_sptr self) -> bool"""
        return _pmt_cpp_swig.start_sense_sptr_start(self)

    def stop(self):
        """stop(start_sense_sptr self) -> bool"""
        return _pmt_cpp_swig.start_sense_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(start_sense_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.start_sense_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(start_sense_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.start_sense_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(start_sense_sptr self) -> int"""
        return _pmt_cpp_swig.start_sense_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(start_sense_sptr self, int m)"""
        return _pmt_cpp_swig.start_sense_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(start_sense_sptr self)"""
        return _pmt_cpp_swig.start_sense_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(start_sense_sptr self) -> bool"""
        return _pmt_cpp_swig.start_sense_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(start_sense_sptr self, int m)"""
        return _pmt_cpp_swig.start_sense_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(start_sense_sptr self) -> int"""
        return _pmt_cpp_swig.start_sense_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(start_sense_sptr self, int i) -> long"""
        return _pmt_cpp_swig.start_sense_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(start_sense_sptr self, long max_output_buffer)
        set_max_output_buffer(start_sense_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.start_sense_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(start_sense_sptr self, int i) -> long"""
        return _pmt_cpp_swig.start_sense_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(start_sense_sptr self, long min_output_buffer)
        set_min_output_buffer(start_sense_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.start_sense_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(start_sense_sptr self) -> float"""
        return _pmt_cpp_swig.start_sense_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(start_sense_sptr self) -> float"""
        return _pmt_cpp_swig.start_sense_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(start_sense_sptr self) -> float"""
        return _pmt_cpp_swig.start_sense_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(start_sense_sptr self) -> float"""
        return _pmt_cpp_swig.start_sense_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(start_sense_sptr self) -> float"""
        return _pmt_cpp_swig.start_sense_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(start_sense_sptr self) -> float"""
        return _pmt_cpp_swig.start_sense_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(start_sense_sptr self, int which) -> float
        pc_input_buffers_full(start_sense_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.start_sense_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(start_sense_sptr self, int which) -> float
        pc_input_buffers_full_avg(start_sense_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.start_sense_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(start_sense_sptr self, int which) -> float
        pc_input_buffers_full_var(start_sense_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.start_sense_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(start_sense_sptr self, int which) -> float
        pc_output_buffers_full(start_sense_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.start_sense_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(start_sense_sptr self, int which) -> float
        pc_output_buffers_full_avg(start_sense_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.start_sense_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(start_sense_sptr self, int which) -> float
        pc_output_buffers_full_var(start_sense_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.start_sense_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(start_sense_sptr self) -> float"""
        return _pmt_cpp_swig.start_sense_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(start_sense_sptr self) -> float"""
        return _pmt_cpp_swig.start_sense_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(start_sense_sptr self) -> float"""
        return _pmt_cpp_swig.start_sense_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(start_sense_sptr self) -> float"""
        return _pmt_cpp_swig.start_sense_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(start_sense_sptr self) -> float"""
        return _pmt_cpp_swig.start_sense_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(start_sense_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.start_sense_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(start_sense_sptr self)"""
        return _pmt_cpp_swig.start_sense_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(start_sense_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.start_sense_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(start_sense_sptr self) -> int"""
        return _pmt_cpp_swig.start_sense_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(start_sense_sptr self) -> int"""
        return _pmt_cpp_swig.start_sense_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(start_sense_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.start_sense_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(start_sense_sptr self) -> std::string"""
        return _pmt_cpp_swig.start_sense_sptr_name(self)

    def symbol_name(self):
        """symbol_name(start_sense_sptr self) -> std::string"""
        return _pmt_cpp_swig.start_sense_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(start_sense_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.start_sense_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(start_sense_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.start_sense_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(start_sense_sptr self) -> long"""
        return _pmt_cpp_swig.start_sense_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(start_sense_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.start_sense_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(start_sense_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.start_sense_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(start_sense_sptr self) -> std::string"""
        return _pmt_cpp_swig.start_sense_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(start_sense_sptr self, std::string name)"""
        return _pmt_cpp_swig.start_sense_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(start_sense_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.start_sense_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(start_sense_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.start_sense_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(start_sense_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.start_sense_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(start_sense_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.start_sense_sptr_message_subscribers(self, *args, **kwargs)

start_sense_sptr_swigregister = _pmt_cpp_swig.start_sense_sptr_swigregister
start_sense_sptr_swigregister(start_sense_sptr)

start_sense_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
start_sense = start_sense.make;

class file_connect(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> file_connect_sptr

        Return a shared_ptr to a new instance of pmt_cpp::file_connect.

        To avoid accidental use of raw pointers, pmt_cpp::file_connect's constructor is in a private implementation class. pmt_cpp::file_connect::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.file_connect_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_file_connect
    __del__ = lambda self : None;
file_connect_swigregister = _pmt_cpp_swig.file_connect_swigregister
file_connect_swigregister(file_connect)

def file_connect_make():
  """
    file_connect_make() -> file_connect_sptr

    Return a shared_ptr to a new instance of pmt_cpp::file_connect.

    To avoid accidental use of raw pointers, pmt_cpp::file_connect's constructor is in a private implementation class. pmt_cpp::file_connect::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.file_connect_make()

class file_connect_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::file_connect)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::file_connect)> self) -> file_connect_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::file_connect)> self, file_connect p) -> file_connect_sptr
        """
        this = _pmt_cpp_swig.new_file_connect_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(file_connect_sptr self) -> file_connect"""
        return _pmt_cpp_swig.file_connect_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_file_connect_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(file_connect_sptr self) -> file_connect_sptr

        Return a shared_ptr to a new instance of pmt_cpp::file_connect.

        To avoid accidental use of raw pointers, pmt_cpp::file_connect's constructor is in a private implementation class. pmt_cpp::file_connect::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.file_connect_sptr_make(self)

    def history(self):
        """history(file_connect_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.file_connect_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(file_connect_sptr self, int which, int delay)
        declare_sample_delay(file_connect_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.file_connect_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(file_connect_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.file_connect_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(file_connect_sptr self) -> int"""
        return _pmt_cpp_swig.file_connect_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(file_connect_sptr self) -> double"""
        return _pmt_cpp_swig.file_connect_sptr_relative_rate(self)

    def start(self):
        """start(file_connect_sptr self) -> bool"""
        return _pmt_cpp_swig.file_connect_sptr_start(self)

    def stop(self):
        """stop(file_connect_sptr self) -> bool"""
        return _pmt_cpp_swig.file_connect_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(file_connect_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.file_connect_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(file_connect_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.file_connect_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(file_connect_sptr self) -> int"""
        return _pmt_cpp_swig.file_connect_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(file_connect_sptr self, int m)"""
        return _pmt_cpp_swig.file_connect_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(file_connect_sptr self)"""
        return _pmt_cpp_swig.file_connect_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(file_connect_sptr self) -> bool"""
        return _pmt_cpp_swig.file_connect_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(file_connect_sptr self, int m)"""
        return _pmt_cpp_swig.file_connect_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(file_connect_sptr self) -> int"""
        return _pmt_cpp_swig.file_connect_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(file_connect_sptr self, int i) -> long"""
        return _pmt_cpp_swig.file_connect_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(file_connect_sptr self, long max_output_buffer)
        set_max_output_buffer(file_connect_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.file_connect_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(file_connect_sptr self, int i) -> long"""
        return _pmt_cpp_swig.file_connect_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(file_connect_sptr self, long min_output_buffer)
        set_min_output_buffer(file_connect_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.file_connect_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(file_connect_sptr self) -> float"""
        return _pmt_cpp_swig.file_connect_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(file_connect_sptr self) -> float"""
        return _pmt_cpp_swig.file_connect_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(file_connect_sptr self) -> float"""
        return _pmt_cpp_swig.file_connect_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(file_connect_sptr self) -> float"""
        return _pmt_cpp_swig.file_connect_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(file_connect_sptr self) -> float"""
        return _pmt_cpp_swig.file_connect_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(file_connect_sptr self) -> float"""
        return _pmt_cpp_swig.file_connect_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(file_connect_sptr self, int which) -> float
        pc_input_buffers_full(file_connect_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.file_connect_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(file_connect_sptr self, int which) -> float
        pc_input_buffers_full_avg(file_connect_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.file_connect_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(file_connect_sptr self, int which) -> float
        pc_input_buffers_full_var(file_connect_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.file_connect_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(file_connect_sptr self, int which) -> float
        pc_output_buffers_full(file_connect_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.file_connect_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(file_connect_sptr self, int which) -> float
        pc_output_buffers_full_avg(file_connect_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.file_connect_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(file_connect_sptr self, int which) -> float
        pc_output_buffers_full_var(file_connect_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.file_connect_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(file_connect_sptr self) -> float"""
        return _pmt_cpp_swig.file_connect_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(file_connect_sptr self) -> float"""
        return _pmt_cpp_swig.file_connect_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(file_connect_sptr self) -> float"""
        return _pmt_cpp_swig.file_connect_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(file_connect_sptr self) -> float"""
        return _pmt_cpp_swig.file_connect_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(file_connect_sptr self) -> float"""
        return _pmt_cpp_swig.file_connect_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(file_connect_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.file_connect_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(file_connect_sptr self)"""
        return _pmt_cpp_swig.file_connect_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(file_connect_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.file_connect_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(file_connect_sptr self) -> int"""
        return _pmt_cpp_swig.file_connect_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(file_connect_sptr self) -> int"""
        return _pmt_cpp_swig.file_connect_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(file_connect_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.file_connect_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(file_connect_sptr self) -> std::string"""
        return _pmt_cpp_swig.file_connect_sptr_name(self)

    def symbol_name(self):
        """symbol_name(file_connect_sptr self) -> std::string"""
        return _pmt_cpp_swig.file_connect_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(file_connect_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.file_connect_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(file_connect_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.file_connect_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(file_connect_sptr self) -> long"""
        return _pmt_cpp_swig.file_connect_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(file_connect_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.file_connect_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(file_connect_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.file_connect_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(file_connect_sptr self) -> std::string"""
        return _pmt_cpp_swig.file_connect_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(file_connect_sptr self, std::string name)"""
        return _pmt_cpp_swig.file_connect_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(file_connect_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.file_connect_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(file_connect_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.file_connect_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(file_connect_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.file_connect_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(file_connect_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.file_connect_sptr_message_subscribers(self, *args, **kwargs)

file_connect_sptr_swigregister = _pmt_cpp_swig.file_connect_sptr_swigregister
file_connect_sptr_swigregister(file_connect_sptr)

file_connect_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
file_connect = file_connect.make;

class PDU_remove_all_tags(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> PDU_remove_all_tags_sptr

        Return a shared_ptr to a new instance of pmt_cpp::PDU_remove_all_tags.

        To avoid accidental use of raw pointers, pmt_cpp::PDU_remove_all_tags's constructor is in a private implementation class. pmt_cpp::PDU_remove_all_tags::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.PDU_remove_all_tags_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_PDU_remove_all_tags
    __del__ = lambda self : None;
PDU_remove_all_tags_swigregister = _pmt_cpp_swig.PDU_remove_all_tags_swigregister
PDU_remove_all_tags_swigregister(PDU_remove_all_tags)

def PDU_remove_all_tags_make():
  """
    PDU_remove_all_tags_make() -> PDU_remove_all_tags_sptr

    Return a shared_ptr to a new instance of pmt_cpp::PDU_remove_all_tags.

    To avoid accidental use of raw pointers, pmt_cpp::PDU_remove_all_tags's constructor is in a private implementation class. pmt_cpp::PDU_remove_all_tags::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.PDU_remove_all_tags_make()

class PDU_remove_all_tags_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::PDU_remove_all_tags)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::PDU_remove_all_tags)> self) -> PDU_remove_all_tags_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::PDU_remove_all_tags)> self, PDU_remove_all_tags p) -> PDU_remove_all_tags_sptr
        """
        this = _pmt_cpp_swig.new_PDU_remove_all_tags_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(PDU_remove_all_tags_sptr self) -> PDU_remove_all_tags"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_PDU_remove_all_tags_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(PDU_remove_all_tags_sptr self) -> PDU_remove_all_tags_sptr

        Return a shared_ptr to a new instance of pmt_cpp::PDU_remove_all_tags.

        To avoid accidental use of raw pointers, pmt_cpp::PDU_remove_all_tags's constructor is in a private implementation class. pmt_cpp::PDU_remove_all_tags::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_make(self)

    def history(self):
        """history(PDU_remove_all_tags_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(PDU_remove_all_tags_sptr self, int which, int delay)
        declare_sample_delay(PDU_remove_all_tags_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(PDU_remove_all_tags_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(PDU_remove_all_tags_sptr self) -> int"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(PDU_remove_all_tags_sptr self) -> double"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_relative_rate(self)

    def start(self):
        """start(PDU_remove_all_tags_sptr self) -> bool"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_start(self)

    def stop(self):
        """stop(PDU_remove_all_tags_sptr self) -> bool"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(PDU_remove_all_tags_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(PDU_remove_all_tags_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(PDU_remove_all_tags_sptr self) -> int"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(PDU_remove_all_tags_sptr self, int m)"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(PDU_remove_all_tags_sptr self)"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(PDU_remove_all_tags_sptr self) -> bool"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(PDU_remove_all_tags_sptr self, int m)"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(PDU_remove_all_tags_sptr self) -> int"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(PDU_remove_all_tags_sptr self, int i) -> long"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(PDU_remove_all_tags_sptr self, long max_output_buffer)
        set_max_output_buffer(PDU_remove_all_tags_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(PDU_remove_all_tags_sptr self, int i) -> long"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(PDU_remove_all_tags_sptr self, long min_output_buffer)
        set_min_output_buffer(PDU_remove_all_tags_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(PDU_remove_all_tags_sptr self) -> float"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(PDU_remove_all_tags_sptr self) -> float"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(PDU_remove_all_tags_sptr self) -> float"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(PDU_remove_all_tags_sptr self) -> float"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(PDU_remove_all_tags_sptr self) -> float"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(PDU_remove_all_tags_sptr self) -> float"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(PDU_remove_all_tags_sptr self, int which) -> float
        pc_input_buffers_full(PDU_remove_all_tags_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(PDU_remove_all_tags_sptr self, int which) -> float
        pc_input_buffers_full_avg(PDU_remove_all_tags_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(PDU_remove_all_tags_sptr self, int which) -> float
        pc_input_buffers_full_var(PDU_remove_all_tags_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(PDU_remove_all_tags_sptr self, int which) -> float
        pc_output_buffers_full(PDU_remove_all_tags_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(PDU_remove_all_tags_sptr self, int which) -> float
        pc_output_buffers_full_avg(PDU_remove_all_tags_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(PDU_remove_all_tags_sptr self, int which) -> float
        pc_output_buffers_full_var(PDU_remove_all_tags_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(PDU_remove_all_tags_sptr self) -> float"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(PDU_remove_all_tags_sptr self) -> float"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(PDU_remove_all_tags_sptr self) -> float"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(PDU_remove_all_tags_sptr self) -> float"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(PDU_remove_all_tags_sptr self) -> float"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(PDU_remove_all_tags_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(PDU_remove_all_tags_sptr self)"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(PDU_remove_all_tags_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(PDU_remove_all_tags_sptr self) -> int"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(PDU_remove_all_tags_sptr self) -> int"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(PDU_remove_all_tags_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(PDU_remove_all_tags_sptr self) -> std::string"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_name(self)

    def symbol_name(self):
        """symbol_name(PDU_remove_all_tags_sptr self) -> std::string"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(PDU_remove_all_tags_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(PDU_remove_all_tags_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(PDU_remove_all_tags_sptr self) -> long"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(PDU_remove_all_tags_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(PDU_remove_all_tags_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(PDU_remove_all_tags_sptr self) -> std::string"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(PDU_remove_all_tags_sptr self, std::string name)"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(PDU_remove_all_tags_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(PDU_remove_all_tags_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(PDU_remove_all_tags_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(PDU_remove_all_tags_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.PDU_remove_all_tags_sptr_message_subscribers(self, *args, **kwargs)

PDU_remove_all_tags_sptr_swigregister = _pmt_cpp_swig.PDU_remove_all_tags_sptr_swigregister
PDU_remove_all_tags_sptr_swigregister(PDU_remove_all_tags_sptr)

PDU_remove_all_tags_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
PDU_remove_all_tags = PDU_remove_all_tags.make;

class send_file(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> send_file_sptr

        Return a shared_ptr to a new instance of pmt_cpp::send_file.

        To avoid accidental use of raw pointers, pmt_cpp::send_file's constructor is in a private implementation class. pmt_cpp::send_file::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.send_file_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_send_file
    __del__ = lambda self : None;
send_file_swigregister = _pmt_cpp_swig.send_file_swigregister
send_file_swigregister(send_file)

def send_file_make():
  """
    send_file_make() -> send_file_sptr

    Return a shared_ptr to a new instance of pmt_cpp::send_file.

    To avoid accidental use of raw pointers, pmt_cpp::send_file's constructor is in a private implementation class. pmt_cpp::send_file::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.send_file_make()

class send_file_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::send_file)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::send_file)> self) -> send_file_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::send_file)> self, send_file p) -> send_file_sptr
        """
        this = _pmt_cpp_swig.new_send_file_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(send_file_sptr self) -> send_file"""
        return _pmt_cpp_swig.send_file_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_send_file_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(send_file_sptr self) -> send_file_sptr

        Return a shared_ptr to a new instance of pmt_cpp::send_file.

        To avoid accidental use of raw pointers, pmt_cpp::send_file's constructor is in a private implementation class. pmt_cpp::send_file::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.send_file_sptr_make(self)

    def history(self):
        """history(send_file_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.send_file_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(send_file_sptr self, int which, int delay)
        declare_sample_delay(send_file_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.send_file_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(send_file_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.send_file_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(send_file_sptr self) -> int"""
        return _pmt_cpp_swig.send_file_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(send_file_sptr self) -> double"""
        return _pmt_cpp_swig.send_file_sptr_relative_rate(self)

    def start(self):
        """start(send_file_sptr self) -> bool"""
        return _pmt_cpp_swig.send_file_sptr_start(self)

    def stop(self):
        """stop(send_file_sptr self) -> bool"""
        return _pmt_cpp_swig.send_file_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(send_file_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.send_file_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(send_file_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.send_file_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(send_file_sptr self) -> int"""
        return _pmt_cpp_swig.send_file_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(send_file_sptr self, int m)"""
        return _pmt_cpp_swig.send_file_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(send_file_sptr self)"""
        return _pmt_cpp_swig.send_file_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(send_file_sptr self) -> bool"""
        return _pmt_cpp_swig.send_file_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(send_file_sptr self, int m)"""
        return _pmt_cpp_swig.send_file_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(send_file_sptr self) -> int"""
        return _pmt_cpp_swig.send_file_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(send_file_sptr self, int i) -> long"""
        return _pmt_cpp_swig.send_file_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(send_file_sptr self, long max_output_buffer)
        set_max_output_buffer(send_file_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.send_file_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(send_file_sptr self, int i) -> long"""
        return _pmt_cpp_swig.send_file_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(send_file_sptr self, long min_output_buffer)
        set_min_output_buffer(send_file_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.send_file_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(send_file_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(send_file_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(send_file_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(send_file_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(send_file_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(send_file_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(send_file_sptr self, int which) -> float
        pc_input_buffers_full(send_file_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.send_file_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(send_file_sptr self, int which) -> float
        pc_input_buffers_full_avg(send_file_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.send_file_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(send_file_sptr self, int which) -> float
        pc_input_buffers_full_var(send_file_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.send_file_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(send_file_sptr self, int which) -> float
        pc_output_buffers_full(send_file_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.send_file_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(send_file_sptr self, int which) -> float
        pc_output_buffers_full_avg(send_file_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.send_file_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(send_file_sptr self, int which) -> float
        pc_output_buffers_full_var(send_file_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.send_file_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(send_file_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(send_file_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(send_file_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(send_file_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(send_file_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(send_file_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.send_file_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(send_file_sptr self)"""
        return _pmt_cpp_swig.send_file_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(send_file_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.send_file_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(send_file_sptr self) -> int"""
        return _pmt_cpp_swig.send_file_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(send_file_sptr self) -> int"""
        return _pmt_cpp_swig.send_file_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(send_file_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.send_file_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(send_file_sptr self) -> std::string"""
        return _pmt_cpp_swig.send_file_sptr_name(self)

    def symbol_name(self):
        """symbol_name(send_file_sptr self) -> std::string"""
        return _pmt_cpp_swig.send_file_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(send_file_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.send_file_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(send_file_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.send_file_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(send_file_sptr self) -> long"""
        return _pmt_cpp_swig.send_file_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(send_file_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.send_file_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(send_file_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.send_file_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(send_file_sptr self) -> std::string"""
        return _pmt_cpp_swig.send_file_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(send_file_sptr self, std::string name)"""
        return _pmt_cpp_swig.send_file_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(send_file_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.send_file_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(send_file_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.send_file_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(send_file_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.send_file_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(send_file_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.send_file_sptr_message_subscribers(self, *args, **kwargs)

send_file_sptr_swigregister = _pmt_cpp_swig.send_file_sptr_swigregister
send_file_sptr_swigregister(send_file_sptr)

send_file_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
send_file = send_file.make;

class send_file_ACK(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> send_file_ACK_sptr

        Return a shared_ptr to a new instance of pmt_cpp::send_file_ACK.

        To avoid accidental use of raw pointers, pmt_cpp::send_file_ACK's constructor is in a private implementation class. pmt_cpp::send_file_ACK::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.send_file_ACK_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_send_file_ACK
    __del__ = lambda self : None;
send_file_ACK_swigregister = _pmt_cpp_swig.send_file_ACK_swigregister
send_file_ACK_swigregister(send_file_ACK)

def send_file_ACK_make():
  """
    send_file_ACK_make() -> send_file_ACK_sptr

    Return a shared_ptr to a new instance of pmt_cpp::send_file_ACK.

    To avoid accidental use of raw pointers, pmt_cpp::send_file_ACK's constructor is in a private implementation class. pmt_cpp::send_file_ACK::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.send_file_ACK_make()

class send_file_ACK_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::send_file_ACK)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::send_file_ACK)> self) -> send_file_ACK_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::send_file_ACK)> self, send_file_ACK p) -> send_file_ACK_sptr
        """
        this = _pmt_cpp_swig.new_send_file_ACK_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(send_file_ACK_sptr self) -> send_file_ACK"""
        return _pmt_cpp_swig.send_file_ACK_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_send_file_ACK_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(send_file_ACK_sptr self) -> send_file_ACK_sptr

        Return a shared_ptr to a new instance of pmt_cpp::send_file_ACK.

        To avoid accidental use of raw pointers, pmt_cpp::send_file_ACK's constructor is in a private implementation class. pmt_cpp::send_file_ACK::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.send_file_ACK_sptr_make(self)

    def history(self):
        """history(send_file_ACK_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.send_file_ACK_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(send_file_ACK_sptr self, int which, int delay)
        declare_sample_delay(send_file_ACK_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.send_file_ACK_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(send_file_ACK_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.send_file_ACK_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(send_file_ACK_sptr self) -> int"""
        return _pmt_cpp_swig.send_file_ACK_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(send_file_ACK_sptr self) -> double"""
        return _pmt_cpp_swig.send_file_ACK_sptr_relative_rate(self)

    def start(self):
        """start(send_file_ACK_sptr self) -> bool"""
        return _pmt_cpp_swig.send_file_ACK_sptr_start(self)

    def stop(self):
        """stop(send_file_ACK_sptr self) -> bool"""
        return _pmt_cpp_swig.send_file_ACK_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(send_file_ACK_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.send_file_ACK_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(send_file_ACK_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.send_file_ACK_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(send_file_ACK_sptr self) -> int"""
        return _pmt_cpp_swig.send_file_ACK_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(send_file_ACK_sptr self, int m)"""
        return _pmt_cpp_swig.send_file_ACK_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(send_file_ACK_sptr self)"""
        return _pmt_cpp_swig.send_file_ACK_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(send_file_ACK_sptr self) -> bool"""
        return _pmt_cpp_swig.send_file_ACK_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(send_file_ACK_sptr self, int m)"""
        return _pmt_cpp_swig.send_file_ACK_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(send_file_ACK_sptr self) -> int"""
        return _pmt_cpp_swig.send_file_ACK_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(send_file_ACK_sptr self, int i) -> long"""
        return _pmt_cpp_swig.send_file_ACK_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(send_file_ACK_sptr self, long max_output_buffer)
        set_max_output_buffer(send_file_ACK_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.send_file_ACK_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(send_file_ACK_sptr self, int i) -> long"""
        return _pmt_cpp_swig.send_file_ACK_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(send_file_ACK_sptr self, long min_output_buffer)
        set_min_output_buffer(send_file_ACK_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.send_file_ACK_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(send_file_ACK_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(send_file_ACK_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(send_file_ACK_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(send_file_ACK_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(send_file_ACK_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(send_file_ACK_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(send_file_ACK_sptr self, int which) -> float
        pc_input_buffers_full(send_file_ACK_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(send_file_ACK_sptr self, int which) -> float
        pc_input_buffers_full_avg(send_file_ACK_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(send_file_ACK_sptr self, int which) -> float
        pc_input_buffers_full_var(send_file_ACK_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(send_file_ACK_sptr self, int which) -> float
        pc_output_buffers_full(send_file_ACK_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(send_file_ACK_sptr self, int which) -> float
        pc_output_buffers_full_avg(send_file_ACK_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(send_file_ACK_sptr self, int which) -> float
        pc_output_buffers_full_var(send_file_ACK_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(send_file_ACK_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(send_file_ACK_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(send_file_ACK_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(send_file_ACK_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(send_file_ACK_sptr self) -> float"""
        return _pmt_cpp_swig.send_file_ACK_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(send_file_ACK_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.send_file_ACK_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(send_file_ACK_sptr self)"""
        return _pmt_cpp_swig.send_file_ACK_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(send_file_ACK_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.send_file_ACK_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(send_file_ACK_sptr self) -> int"""
        return _pmt_cpp_swig.send_file_ACK_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(send_file_ACK_sptr self) -> int"""
        return _pmt_cpp_swig.send_file_ACK_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(send_file_ACK_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.send_file_ACK_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(send_file_ACK_sptr self) -> std::string"""
        return _pmt_cpp_swig.send_file_ACK_sptr_name(self)

    def symbol_name(self):
        """symbol_name(send_file_ACK_sptr self) -> std::string"""
        return _pmt_cpp_swig.send_file_ACK_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(send_file_ACK_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.send_file_ACK_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(send_file_ACK_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.send_file_ACK_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(send_file_ACK_sptr self) -> long"""
        return _pmt_cpp_swig.send_file_ACK_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(send_file_ACK_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.send_file_ACK_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(send_file_ACK_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.send_file_ACK_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(send_file_ACK_sptr self) -> std::string"""
        return _pmt_cpp_swig.send_file_ACK_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(send_file_ACK_sptr self, std::string name)"""
        return _pmt_cpp_swig.send_file_ACK_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(send_file_ACK_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.send_file_ACK_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(send_file_ACK_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.send_file_ACK_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(send_file_ACK_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.send_file_ACK_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(send_file_ACK_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.send_file_ACK_sptr_message_subscribers(self, *args, **kwargs)

send_file_ACK_sptr_swigregister = _pmt_cpp_swig.send_file_ACK_sptr_swigregister
send_file_ACK_sptr_swigregister(send_file_ACK_sptr)

send_file_ACK_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
send_file_ACK = send_file_ACK.make;

class start_share(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> start_share_sptr

        Return a shared_ptr to a new instance of pmt_cpp::start_share.

        To avoid accidental use of raw pointers, pmt_cpp::start_share's constructor is in a private implementation class. pmt_cpp::start_share::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.start_share_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_start_share
    __del__ = lambda self : None;
start_share_swigregister = _pmt_cpp_swig.start_share_swigregister
start_share_swigregister(start_share)

def start_share_make():
  """
    start_share_make() -> start_share_sptr

    Return a shared_ptr to a new instance of pmt_cpp::start_share.

    To avoid accidental use of raw pointers, pmt_cpp::start_share's constructor is in a private implementation class. pmt_cpp::start_share::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.start_share_make()

class start_share_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::start_share)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::start_share)> self) -> start_share_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::start_share)> self, start_share p) -> start_share_sptr
        """
        this = _pmt_cpp_swig.new_start_share_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(start_share_sptr self) -> start_share"""
        return _pmt_cpp_swig.start_share_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_start_share_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(start_share_sptr self) -> start_share_sptr

        Return a shared_ptr to a new instance of pmt_cpp::start_share.

        To avoid accidental use of raw pointers, pmt_cpp::start_share's constructor is in a private implementation class. pmt_cpp::start_share::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.start_share_sptr_make(self)

    def history(self):
        """history(start_share_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.start_share_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(start_share_sptr self, int which, int delay)
        declare_sample_delay(start_share_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.start_share_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(start_share_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.start_share_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(start_share_sptr self) -> int"""
        return _pmt_cpp_swig.start_share_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(start_share_sptr self) -> double"""
        return _pmt_cpp_swig.start_share_sptr_relative_rate(self)

    def start(self):
        """start(start_share_sptr self) -> bool"""
        return _pmt_cpp_swig.start_share_sptr_start(self)

    def stop(self):
        """stop(start_share_sptr self) -> bool"""
        return _pmt_cpp_swig.start_share_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(start_share_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.start_share_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(start_share_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.start_share_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(start_share_sptr self) -> int"""
        return _pmt_cpp_swig.start_share_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(start_share_sptr self, int m)"""
        return _pmt_cpp_swig.start_share_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(start_share_sptr self)"""
        return _pmt_cpp_swig.start_share_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(start_share_sptr self) -> bool"""
        return _pmt_cpp_swig.start_share_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(start_share_sptr self, int m)"""
        return _pmt_cpp_swig.start_share_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(start_share_sptr self) -> int"""
        return _pmt_cpp_swig.start_share_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(start_share_sptr self, int i) -> long"""
        return _pmt_cpp_swig.start_share_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(start_share_sptr self, long max_output_buffer)
        set_max_output_buffer(start_share_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.start_share_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(start_share_sptr self, int i) -> long"""
        return _pmt_cpp_swig.start_share_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(start_share_sptr self, long min_output_buffer)
        set_min_output_buffer(start_share_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.start_share_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(start_share_sptr self) -> float"""
        return _pmt_cpp_swig.start_share_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(start_share_sptr self) -> float"""
        return _pmt_cpp_swig.start_share_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(start_share_sptr self) -> float"""
        return _pmt_cpp_swig.start_share_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(start_share_sptr self) -> float"""
        return _pmt_cpp_swig.start_share_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(start_share_sptr self) -> float"""
        return _pmt_cpp_swig.start_share_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(start_share_sptr self) -> float"""
        return _pmt_cpp_swig.start_share_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(start_share_sptr self, int which) -> float
        pc_input_buffers_full(start_share_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.start_share_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(start_share_sptr self, int which) -> float
        pc_input_buffers_full_avg(start_share_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.start_share_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(start_share_sptr self, int which) -> float
        pc_input_buffers_full_var(start_share_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.start_share_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(start_share_sptr self, int which) -> float
        pc_output_buffers_full(start_share_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.start_share_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(start_share_sptr self, int which) -> float
        pc_output_buffers_full_avg(start_share_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.start_share_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(start_share_sptr self, int which) -> float
        pc_output_buffers_full_var(start_share_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.start_share_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(start_share_sptr self) -> float"""
        return _pmt_cpp_swig.start_share_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(start_share_sptr self) -> float"""
        return _pmt_cpp_swig.start_share_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(start_share_sptr self) -> float"""
        return _pmt_cpp_swig.start_share_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(start_share_sptr self) -> float"""
        return _pmt_cpp_swig.start_share_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(start_share_sptr self) -> float"""
        return _pmt_cpp_swig.start_share_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(start_share_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.start_share_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(start_share_sptr self)"""
        return _pmt_cpp_swig.start_share_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(start_share_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.start_share_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(start_share_sptr self) -> int"""
        return _pmt_cpp_swig.start_share_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(start_share_sptr self) -> int"""
        return _pmt_cpp_swig.start_share_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(start_share_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.start_share_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(start_share_sptr self) -> std::string"""
        return _pmt_cpp_swig.start_share_sptr_name(self)

    def symbol_name(self):
        """symbol_name(start_share_sptr self) -> std::string"""
        return _pmt_cpp_swig.start_share_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(start_share_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.start_share_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(start_share_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.start_share_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(start_share_sptr self) -> long"""
        return _pmt_cpp_swig.start_share_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(start_share_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.start_share_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(start_share_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.start_share_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(start_share_sptr self) -> std::string"""
        return _pmt_cpp_swig.start_share_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(start_share_sptr self, std::string name)"""
        return _pmt_cpp_swig.start_share_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(start_share_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.start_share_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(start_share_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.start_share_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(start_share_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.start_share_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(start_share_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.start_share_sptr_message_subscribers(self, *args, **kwargs)

start_share_sptr_swigregister = _pmt_cpp_swig.start_share_sptr_swigregister
start_share_sptr_swigregister(start_share_sptr)

start_share_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
start_share = start_share.make;

class ACK(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> ACK_sptr

        Return a shared_ptr to a new instance of pmt_cpp::ACK.

        To avoid accidental use of raw pointers, pmt_cpp::ACK's constructor is in a private implementation class. pmt_cpp::ACK::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.ACK_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_ACK
    __del__ = lambda self : None;
ACK_swigregister = _pmt_cpp_swig.ACK_swigregister
ACK_swigregister(ACK)

def ACK_make():
  """
    ACK_make() -> ACK_sptr

    Return a shared_ptr to a new instance of pmt_cpp::ACK.

    To avoid accidental use of raw pointers, pmt_cpp::ACK's constructor is in a private implementation class. pmt_cpp::ACK::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.ACK_make()

class ACK_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::ACK)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::ACK)> self) -> ACK_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::ACK)> self, ACK p) -> ACK_sptr
        """
        this = _pmt_cpp_swig.new_ACK_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ACK_sptr self) -> ACK"""
        return _pmt_cpp_swig.ACK_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_ACK_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(ACK_sptr self) -> ACK_sptr

        Return a shared_ptr to a new instance of pmt_cpp::ACK.

        To avoid accidental use of raw pointers, pmt_cpp::ACK's constructor is in a private implementation class. pmt_cpp::ACK::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.ACK_sptr_make(self)

    def history(self):
        """history(ACK_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.ACK_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ACK_sptr self, int which, int delay)
        declare_sample_delay(ACK_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.ACK_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(ACK_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.ACK_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(ACK_sptr self) -> int"""
        return _pmt_cpp_swig.ACK_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ACK_sptr self) -> double"""
        return _pmt_cpp_swig.ACK_sptr_relative_rate(self)

    def start(self):
        """start(ACK_sptr self) -> bool"""
        return _pmt_cpp_swig.ACK_sptr_start(self)

    def stop(self):
        """stop(ACK_sptr self) -> bool"""
        return _pmt_cpp_swig.ACK_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ACK_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.ACK_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ACK_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.ACK_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ACK_sptr self) -> int"""
        return _pmt_cpp_swig.ACK_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ACK_sptr self, int m)"""
        return _pmt_cpp_swig.ACK_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ACK_sptr self)"""
        return _pmt_cpp_swig.ACK_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ACK_sptr self) -> bool"""
        return _pmt_cpp_swig.ACK_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(ACK_sptr self, int m)"""
        return _pmt_cpp_swig.ACK_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(ACK_sptr self) -> int"""
        return _pmt_cpp_swig.ACK_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ACK_sptr self, int i) -> long"""
        return _pmt_cpp_swig.ACK_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ACK_sptr self, long max_output_buffer)
        set_max_output_buffer(ACK_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.ACK_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ACK_sptr self, int i) -> long"""
        return _pmt_cpp_swig.ACK_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ACK_sptr self, long min_output_buffer)
        set_min_output_buffer(ACK_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.ACK_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ACK_sptr self) -> float"""
        return _pmt_cpp_swig.ACK_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ACK_sptr self) -> float"""
        return _pmt_cpp_swig.ACK_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ACK_sptr self) -> float"""
        return _pmt_cpp_swig.ACK_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ACK_sptr self) -> float"""
        return _pmt_cpp_swig.ACK_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ACK_sptr self) -> float"""
        return _pmt_cpp_swig.ACK_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ACK_sptr self) -> float"""
        return _pmt_cpp_swig.ACK_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ACK_sptr self, int which) -> float
        pc_input_buffers_full(ACK_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.ACK_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ACK_sptr self, int which) -> float
        pc_input_buffers_full_avg(ACK_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.ACK_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ACK_sptr self, int which) -> float
        pc_input_buffers_full_var(ACK_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.ACK_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ACK_sptr self, int which) -> float
        pc_output_buffers_full(ACK_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.ACK_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ACK_sptr self, int which) -> float
        pc_output_buffers_full_avg(ACK_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.ACK_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ACK_sptr self, int which) -> float
        pc_output_buffers_full_var(ACK_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.ACK_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ACK_sptr self) -> float"""
        return _pmt_cpp_swig.ACK_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(ACK_sptr self) -> float"""
        return _pmt_cpp_swig.ACK_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ACK_sptr self) -> float"""
        return _pmt_cpp_swig.ACK_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(ACK_sptr self) -> float"""
        return _pmt_cpp_swig.ACK_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(ACK_sptr self) -> float"""
        return _pmt_cpp_swig.ACK_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ACK_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.ACK_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ACK_sptr self)"""
        return _pmt_cpp_swig.ACK_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ACK_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.ACK_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(ACK_sptr self) -> int"""
        return _pmt_cpp_swig.ACK_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(ACK_sptr self) -> int"""
        return _pmt_cpp_swig.ACK_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(ACK_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.ACK_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(ACK_sptr self) -> std::string"""
        return _pmt_cpp_swig.ACK_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ACK_sptr self) -> std::string"""
        return _pmt_cpp_swig.ACK_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ACK_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.ACK_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ACK_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.ACK_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ACK_sptr self) -> long"""
        return _pmt_cpp_swig.ACK_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ACK_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.ACK_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ACK_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.ACK_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ACK_sptr self) -> std::string"""
        return _pmt_cpp_swig.ACK_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ACK_sptr self, std::string name)"""
        return _pmt_cpp_swig.ACK_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ACK_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.ACK_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ACK_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.ACK_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ACK_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.ACK_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(ACK_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.ACK_sptr_message_subscribers(self, *args, **kwargs)

ACK_sptr_swigregister = _pmt_cpp_swig.ACK_sptr_swigregister
ACK_sptr_swigregister(ACK_sptr)

ACK_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ACK = ACK.make;

class pmt_extract_master(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> pmt_extract_master_sptr

        Return a shared_ptr to a new instance of pmt_cpp::pmt_extract_master.

        To avoid accidental use of raw pointers, pmt_cpp::pmt_extract_master's constructor is in a private implementation class. pmt_cpp::pmt_extract_master::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.pmt_extract_master_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_pmt_extract_master
    __del__ = lambda self : None;
pmt_extract_master_swigregister = _pmt_cpp_swig.pmt_extract_master_swigregister
pmt_extract_master_swigregister(pmt_extract_master)

def pmt_extract_master_make():
  """
    pmt_extract_master_make() -> pmt_extract_master_sptr

    Return a shared_ptr to a new instance of pmt_cpp::pmt_extract_master.

    To avoid accidental use of raw pointers, pmt_cpp::pmt_extract_master's constructor is in a private implementation class. pmt_cpp::pmt_extract_master::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.pmt_extract_master_make()

class pmt_extract_master_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::pmt_extract_master)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::pmt_extract_master)> self) -> pmt_extract_master_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::pmt_extract_master)> self, pmt_extract_master p) -> pmt_extract_master_sptr
        """
        this = _pmt_cpp_swig.new_pmt_extract_master_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(pmt_extract_master_sptr self) -> pmt_extract_master"""
        return _pmt_cpp_swig.pmt_extract_master_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_pmt_extract_master_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(pmt_extract_master_sptr self) -> pmt_extract_master_sptr

        Return a shared_ptr to a new instance of pmt_cpp::pmt_extract_master.

        To avoid accidental use of raw pointers, pmt_cpp::pmt_extract_master's constructor is in a private implementation class. pmt_cpp::pmt_extract_master::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.pmt_extract_master_sptr_make(self)

    def history(self):
        """history(pmt_extract_master_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(pmt_extract_master_sptr self, int which, int delay)
        declare_sample_delay(pmt_extract_master_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.pmt_extract_master_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(pmt_extract_master_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(pmt_extract_master_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(pmt_extract_master_sptr self) -> double"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_relative_rate(self)

    def start(self):
        """start(pmt_extract_master_sptr self) -> bool"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_start(self)

    def stop(self):
        """stop(pmt_extract_master_sptr self) -> bool"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(pmt_extract_master_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(pmt_extract_master_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(pmt_extract_master_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(pmt_extract_master_sptr self, int m)"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(pmt_extract_master_sptr self)"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(pmt_extract_master_sptr self) -> bool"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(pmt_extract_master_sptr self, int m)"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(pmt_extract_master_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(pmt_extract_master_sptr self, int i) -> long"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(pmt_extract_master_sptr self, long max_output_buffer)
        set_max_output_buffer(pmt_extract_master_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.pmt_extract_master_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(pmt_extract_master_sptr self, int i) -> long"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(pmt_extract_master_sptr self, long min_output_buffer)
        set_min_output_buffer(pmt_extract_master_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.pmt_extract_master_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(pmt_extract_master_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(pmt_extract_master_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(pmt_extract_master_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(pmt_extract_master_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(pmt_extract_master_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(pmt_extract_master_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(pmt_extract_master_sptr self, int which) -> float
        pc_input_buffers_full(pmt_extract_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(pmt_extract_master_sptr self, int which) -> float
        pc_input_buffers_full_avg(pmt_extract_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(pmt_extract_master_sptr self, int which) -> float
        pc_input_buffers_full_var(pmt_extract_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(pmt_extract_master_sptr self, int which) -> float
        pc_output_buffers_full(pmt_extract_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(pmt_extract_master_sptr self, int which) -> float
        pc_output_buffers_full_avg(pmt_extract_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(pmt_extract_master_sptr self, int which) -> float
        pc_output_buffers_full_var(pmt_extract_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(pmt_extract_master_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(pmt_extract_master_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(pmt_extract_master_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(pmt_extract_master_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(pmt_extract_master_sptr self) -> float"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(pmt_extract_master_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(pmt_extract_master_sptr self)"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(pmt_extract_master_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(pmt_extract_master_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(pmt_extract_master_sptr self) -> int"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(pmt_extract_master_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(pmt_extract_master_sptr self) -> std::string"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_name(self)

    def symbol_name(self):
        """symbol_name(pmt_extract_master_sptr self) -> std::string"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(pmt_extract_master_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(pmt_extract_master_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(pmt_extract_master_sptr self) -> long"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(pmt_extract_master_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(pmt_extract_master_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(pmt_extract_master_sptr self) -> std::string"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(pmt_extract_master_sptr self, std::string name)"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(pmt_extract_master_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.pmt_extract_master_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(pmt_extract_master_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(pmt_extract_master_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(pmt_extract_master_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.pmt_extract_master_sptr_message_subscribers(self, *args, **kwargs)

pmt_extract_master_sptr_swigregister = _pmt_cpp_swig.pmt_extract_master_sptr_swigregister
pmt_extract_master_sptr_swigregister(pmt_extract_master_sptr)

pmt_extract_master_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
pmt_extract_master = pmt_extract_master.make;

class time(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> time_sptr

        Return a shared_ptr to a new instance of pmt_cpp::time.

        To avoid accidental use of raw pointers, pmt_cpp::time's constructor is in a private implementation class. pmt_cpp::time::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.time_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_time
    __del__ = lambda self : None;
time_swigregister = _pmt_cpp_swig.time_swigregister
time_swigregister(time)

def time_make():
  """
    time_make() -> time_sptr

    Return a shared_ptr to a new instance of pmt_cpp::time.

    To avoid accidental use of raw pointers, pmt_cpp::time's constructor is in a private implementation class. pmt_cpp::time::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.time_make()

class time_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::time)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::time)> self) -> time_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::time)> self, time p) -> time_sptr
        """
        this = _pmt_cpp_swig.new_time_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(time_sptr self) -> time"""
        return _pmt_cpp_swig.time_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_time_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(time_sptr self) -> time_sptr

        Return a shared_ptr to a new instance of pmt_cpp::time.

        To avoid accidental use of raw pointers, pmt_cpp::time's constructor is in a private implementation class. pmt_cpp::time::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.time_sptr_make(self)

    def history(self):
        """history(time_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.time_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(time_sptr self, int which, int delay)
        declare_sample_delay(time_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.time_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(time_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.time_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(time_sptr self) -> int"""
        return _pmt_cpp_swig.time_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(time_sptr self) -> double"""
        return _pmt_cpp_swig.time_sptr_relative_rate(self)

    def start(self):
        """start(time_sptr self) -> bool"""
        return _pmt_cpp_swig.time_sptr_start(self)

    def stop(self):
        """stop(time_sptr self) -> bool"""
        return _pmt_cpp_swig.time_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(time_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.time_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(time_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.time_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(time_sptr self) -> int"""
        return _pmt_cpp_swig.time_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(time_sptr self, int m)"""
        return _pmt_cpp_swig.time_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(time_sptr self)"""
        return _pmt_cpp_swig.time_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(time_sptr self) -> bool"""
        return _pmt_cpp_swig.time_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(time_sptr self, int m)"""
        return _pmt_cpp_swig.time_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(time_sptr self) -> int"""
        return _pmt_cpp_swig.time_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(time_sptr self, int i) -> long"""
        return _pmt_cpp_swig.time_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(time_sptr self, long max_output_buffer)
        set_max_output_buffer(time_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.time_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(time_sptr self, int i) -> long"""
        return _pmt_cpp_swig.time_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(time_sptr self, long min_output_buffer)
        set_min_output_buffer(time_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.time_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(time_sptr self) -> float"""
        return _pmt_cpp_swig.time_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(time_sptr self) -> float"""
        return _pmt_cpp_swig.time_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(time_sptr self) -> float"""
        return _pmt_cpp_swig.time_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(time_sptr self) -> float"""
        return _pmt_cpp_swig.time_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(time_sptr self) -> float"""
        return _pmt_cpp_swig.time_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(time_sptr self) -> float"""
        return _pmt_cpp_swig.time_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(time_sptr self, int which) -> float
        pc_input_buffers_full(time_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.time_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(time_sptr self, int which) -> float
        pc_input_buffers_full_avg(time_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.time_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(time_sptr self, int which) -> float
        pc_input_buffers_full_var(time_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.time_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(time_sptr self, int which) -> float
        pc_output_buffers_full(time_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.time_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(time_sptr self, int which) -> float
        pc_output_buffers_full_avg(time_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.time_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(time_sptr self, int which) -> float
        pc_output_buffers_full_var(time_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.time_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(time_sptr self) -> float"""
        return _pmt_cpp_swig.time_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(time_sptr self) -> float"""
        return _pmt_cpp_swig.time_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(time_sptr self) -> float"""
        return _pmt_cpp_swig.time_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(time_sptr self) -> float"""
        return _pmt_cpp_swig.time_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(time_sptr self) -> float"""
        return _pmt_cpp_swig.time_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(time_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.time_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(time_sptr self)"""
        return _pmt_cpp_swig.time_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(time_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.time_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(time_sptr self) -> int"""
        return _pmt_cpp_swig.time_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(time_sptr self) -> int"""
        return _pmt_cpp_swig.time_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(time_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.time_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(time_sptr self) -> std::string"""
        return _pmt_cpp_swig.time_sptr_name(self)

    def symbol_name(self):
        """symbol_name(time_sptr self) -> std::string"""
        return _pmt_cpp_swig.time_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(time_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.time_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(time_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.time_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(time_sptr self) -> long"""
        return _pmt_cpp_swig.time_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(time_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.time_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(time_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.time_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(time_sptr self) -> std::string"""
        return _pmt_cpp_swig.time_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(time_sptr self, std::string name)"""
        return _pmt_cpp_swig.time_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(time_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.time_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(time_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.time_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(time_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.time_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(time_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.time_sptr_message_subscribers(self, *args, **kwargs)

time_sptr_swigregister = _pmt_cpp_swig.time_sptr_swigregister
time_sptr_swigregister(time_sptr)

time_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
time = time.make;

class decide(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> decide_sptr

        Return a shared_ptr to a new instance of pmt_cpp::decide.

        To avoid accidental use of raw pointers, pmt_cpp::decide's constructor is in a private implementation class. pmt_cpp::decide::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.decide_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_decide
    __del__ = lambda self : None;
decide_swigregister = _pmt_cpp_swig.decide_swigregister
decide_swigregister(decide)

def decide_make():
  """
    decide_make() -> decide_sptr

    Return a shared_ptr to a new instance of pmt_cpp::decide.

    To avoid accidental use of raw pointers, pmt_cpp::decide's constructor is in a private implementation class. pmt_cpp::decide::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.decide_make()

class decide_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::decide)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::decide)> self) -> decide_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::decide)> self, decide p) -> decide_sptr
        """
        this = _pmt_cpp_swig.new_decide_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(decide_sptr self) -> decide"""
        return _pmt_cpp_swig.decide_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_decide_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(decide_sptr self) -> decide_sptr

        Return a shared_ptr to a new instance of pmt_cpp::decide.

        To avoid accidental use of raw pointers, pmt_cpp::decide's constructor is in a private implementation class. pmt_cpp::decide::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.decide_sptr_make(self)

    def history(self):
        """history(decide_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.decide_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(decide_sptr self, int which, int delay)
        declare_sample_delay(decide_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.decide_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(decide_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.decide_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(decide_sptr self) -> int"""
        return _pmt_cpp_swig.decide_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(decide_sptr self) -> double"""
        return _pmt_cpp_swig.decide_sptr_relative_rate(self)

    def start(self):
        """start(decide_sptr self) -> bool"""
        return _pmt_cpp_swig.decide_sptr_start(self)

    def stop(self):
        """stop(decide_sptr self) -> bool"""
        return _pmt_cpp_swig.decide_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(decide_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.decide_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(decide_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.decide_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(decide_sptr self) -> int"""
        return _pmt_cpp_swig.decide_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(decide_sptr self, int m)"""
        return _pmt_cpp_swig.decide_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(decide_sptr self)"""
        return _pmt_cpp_swig.decide_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(decide_sptr self) -> bool"""
        return _pmt_cpp_swig.decide_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(decide_sptr self, int m)"""
        return _pmt_cpp_swig.decide_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(decide_sptr self) -> int"""
        return _pmt_cpp_swig.decide_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(decide_sptr self, int i) -> long"""
        return _pmt_cpp_swig.decide_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(decide_sptr self, long max_output_buffer)
        set_max_output_buffer(decide_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.decide_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(decide_sptr self, int i) -> long"""
        return _pmt_cpp_swig.decide_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(decide_sptr self, long min_output_buffer)
        set_min_output_buffer(decide_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.decide_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(decide_sptr self) -> float"""
        return _pmt_cpp_swig.decide_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(decide_sptr self) -> float"""
        return _pmt_cpp_swig.decide_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(decide_sptr self) -> float"""
        return _pmt_cpp_swig.decide_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(decide_sptr self) -> float"""
        return _pmt_cpp_swig.decide_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(decide_sptr self) -> float"""
        return _pmt_cpp_swig.decide_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(decide_sptr self) -> float"""
        return _pmt_cpp_swig.decide_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(decide_sptr self, int which) -> float
        pc_input_buffers_full(decide_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.decide_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(decide_sptr self, int which) -> float
        pc_input_buffers_full_avg(decide_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.decide_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(decide_sptr self, int which) -> float
        pc_input_buffers_full_var(decide_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.decide_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(decide_sptr self, int which) -> float
        pc_output_buffers_full(decide_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.decide_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(decide_sptr self, int which) -> float
        pc_output_buffers_full_avg(decide_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.decide_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(decide_sptr self, int which) -> float
        pc_output_buffers_full_var(decide_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.decide_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(decide_sptr self) -> float"""
        return _pmt_cpp_swig.decide_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(decide_sptr self) -> float"""
        return _pmt_cpp_swig.decide_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(decide_sptr self) -> float"""
        return _pmt_cpp_swig.decide_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(decide_sptr self) -> float"""
        return _pmt_cpp_swig.decide_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(decide_sptr self) -> float"""
        return _pmt_cpp_swig.decide_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(decide_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.decide_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(decide_sptr self)"""
        return _pmt_cpp_swig.decide_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(decide_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.decide_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(decide_sptr self) -> int"""
        return _pmt_cpp_swig.decide_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(decide_sptr self) -> int"""
        return _pmt_cpp_swig.decide_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(decide_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.decide_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(decide_sptr self) -> std::string"""
        return _pmt_cpp_swig.decide_sptr_name(self)

    def symbol_name(self):
        """symbol_name(decide_sptr self) -> std::string"""
        return _pmt_cpp_swig.decide_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(decide_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.decide_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(decide_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.decide_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(decide_sptr self) -> long"""
        return _pmt_cpp_swig.decide_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(decide_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.decide_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(decide_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.decide_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(decide_sptr self) -> std::string"""
        return _pmt_cpp_swig.decide_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(decide_sptr self, std::string name)"""
        return _pmt_cpp_swig.decide_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(decide_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.decide_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(decide_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.decide_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(decide_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.decide_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(decide_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.decide_sptr_message_subscribers(self, *args, **kwargs)

decide_sptr_swigregister = _pmt_cpp_swig.decide_sptr_swigregister
decide_sptr_swigregister(decide_sptr)

decide_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
decide = decide.make;

class message_generation(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> message_generation_sptr

        Return a shared_ptr to a new instance of pmt_cpp::message_generation.

        To avoid accidental use of raw pointers, pmt_cpp::message_generation's constructor is in a private implementation class. pmt_cpp::message_generation::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.message_generation_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_message_generation
    __del__ = lambda self : None;
message_generation_swigregister = _pmt_cpp_swig.message_generation_swigregister
message_generation_swigregister(message_generation)

def message_generation_make():
  """
    message_generation_make() -> message_generation_sptr

    Return a shared_ptr to a new instance of pmt_cpp::message_generation.

    To avoid accidental use of raw pointers, pmt_cpp::message_generation's constructor is in a private implementation class. pmt_cpp::message_generation::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.message_generation_make()

class message_generation_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::message_generation)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::message_generation)> self) -> message_generation_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::message_generation)> self, message_generation p) -> message_generation_sptr
        """
        this = _pmt_cpp_swig.new_message_generation_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(message_generation_sptr self) -> message_generation"""
        return _pmt_cpp_swig.message_generation_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_message_generation_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(message_generation_sptr self) -> message_generation_sptr

        Return a shared_ptr to a new instance of pmt_cpp::message_generation.

        To avoid accidental use of raw pointers, pmt_cpp::message_generation's constructor is in a private implementation class. pmt_cpp::message_generation::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.message_generation_sptr_make(self)

    def history(self):
        """history(message_generation_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.message_generation_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(message_generation_sptr self, int which, int delay)
        declare_sample_delay(message_generation_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.message_generation_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(message_generation_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.message_generation_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(message_generation_sptr self) -> int"""
        return _pmt_cpp_swig.message_generation_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(message_generation_sptr self) -> double"""
        return _pmt_cpp_swig.message_generation_sptr_relative_rate(self)

    def start(self):
        """start(message_generation_sptr self) -> bool"""
        return _pmt_cpp_swig.message_generation_sptr_start(self)

    def stop(self):
        """stop(message_generation_sptr self) -> bool"""
        return _pmt_cpp_swig.message_generation_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(message_generation_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.message_generation_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(message_generation_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.message_generation_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(message_generation_sptr self) -> int"""
        return _pmt_cpp_swig.message_generation_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(message_generation_sptr self, int m)"""
        return _pmt_cpp_swig.message_generation_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(message_generation_sptr self)"""
        return _pmt_cpp_swig.message_generation_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(message_generation_sptr self) -> bool"""
        return _pmt_cpp_swig.message_generation_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(message_generation_sptr self, int m)"""
        return _pmt_cpp_swig.message_generation_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(message_generation_sptr self) -> int"""
        return _pmt_cpp_swig.message_generation_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(message_generation_sptr self, int i) -> long"""
        return _pmt_cpp_swig.message_generation_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(message_generation_sptr self, long max_output_buffer)
        set_max_output_buffer(message_generation_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.message_generation_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(message_generation_sptr self, int i) -> long"""
        return _pmt_cpp_swig.message_generation_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(message_generation_sptr self, long min_output_buffer)
        set_min_output_buffer(message_generation_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.message_generation_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(message_generation_sptr self) -> float"""
        return _pmt_cpp_swig.message_generation_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(message_generation_sptr self) -> float"""
        return _pmt_cpp_swig.message_generation_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(message_generation_sptr self) -> float"""
        return _pmt_cpp_swig.message_generation_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(message_generation_sptr self) -> float"""
        return _pmt_cpp_swig.message_generation_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(message_generation_sptr self) -> float"""
        return _pmt_cpp_swig.message_generation_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(message_generation_sptr self) -> float"""
        return _pmt_cpp_swig.message_generation_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(message_generation_sptr self, int which) -> float
        pc_input_buffers_full(message_generation_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.message_generation_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(message_generation_sptr self, int which) -> float
        pc_input_buffers_full_avg(message_generation_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.message_generation_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(message_generation_sptr self, int which) -> float
        pc_input_buffers_full_var(message_generation_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.message_generation_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(message_generation_sptr self, int which) -> float
        pc_output_buffers_full(message_generation_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.message_generation_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(message_generation_sptr self, int which) -> float
        pc_output_buffers_full_avg(message_generation_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.message_generation_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(message_generation_sptr self, int which) -> float
        pc_output_buffers_full_var(message_generation_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.message_generation_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(message_generation_sptr self) -> float"""
        return _pmt_cpp_swig.message_generation_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(message_generation_sptr self) -> float"""
        return _pmt_cpp_swig.message_generation_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(message_generation_sptr self) -> float"""
        return _pmt_cpp_swig.message_generation_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(message_generation_sptr self) -> float"""
        return _pmt_cpp_swig.message_generation_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(message_generation_sptr self) -> float"""
        return _pmt_cpp_swig.message_generation_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(message_generation_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.message_generation_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(message_generation_sptr self)"""
        return _pmt_cpp_swig.message_generation_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(message_generation_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.message_generation_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(message_generation_sptr self) -> int"""
        return _pmt_cpp_swig.message_generation_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(message_generation_sptr self) -> int"""
        return _pmt_cpp_swig.message_generation_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(message_generation_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.message_generation_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(message_generation_sptr self) -> std::string"""
        return _pmt_cpp_swig.message_generation_sptr_name(self)

    def symbol_name(self):
        """symbol_name(message_generation_sptr self) -> std::string"""
        return _pmt_cpp_swig.message_generation_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(message_generation_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.message_generation_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(message_generation_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.message_generation_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(message_generation_sptr self) -> long"""
        return _pmt_cpp_swig.message_generation_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(message_generation_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.message_generation_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(message_generation_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.message_generation_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(message_generation_sptr self) -> std::string"""
        return _pmt_cpp_swig.message_generation_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(message_generation_sptr self, std::string name)"""
        return _pmt_cpp_swig.message_generation_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(message_generation_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.message_generation_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(message_generation_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.message_generation_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(message_generation_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.message_generation_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(message_generation_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.message_generation_sptr_message_subscribers(self, *args, **kwargs)

message_generation_sptr_swigregister = _pmt_cpp_swig.message_generation_sptr_swigregister
message_generation_sptr_swigregister(message_generation_sptr)

message_generation_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
message_generation = message_generation.make;

class wait_first_ack(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> wait_first_ack_sptr

        Return a shared_ptr to a new instance of pmt_cpp::wait_first_ack.

        To avoid accidental use of raw pointers, pmt_cpp::wait_first_ack's constructor is in a private implementation class. pmt_cpp::wait_first_ack::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.wait_first_ack_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_wait_first_ack
    __del__ = lambda self : None;
wait_first_ack_swigregister = _pmt_cpp_swig.wait_first_ack_swigregister
wait_first_ack_swigregister(wait_first_ack)

def wait_first_ack_make():
  """
    wait_first_ack_make() -> wait_first_ack_sptr

    Return a shared_ptr to a new instance of pmt_cpp::wait_first_ack.

    To avoid accidental use of raw pointers, pmt_cpp::wait_first_ack's constructor is in a private implementation class. pmt_cpp::wait_first_ack::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.wait_first_ack_make()

class wait_first_ack_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::wait_first_ack)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::wait_first_ack)> self) -> wait_first_ack_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::wait_first_ack)> self, wait_first_ack p) -> wait_first_ack_sptr
        """
        this = _pmt_cpp_swig.new_wait_first_ack_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(wait_first_ack_sptr self) -> wait_first_ack"""
        return _pmt_cpp_swig.wait_first_ack_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_wait_first_ack_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(wait_first_ack_sptr self) -> wait_first_ack_sptr

        Return a shared_ptr to a new instance of pmt_cpp::wait_first_ack.

        To avoid accidental use of raw pointers, pmt_cpp::wait_first_ack's constructor is in a private implementation class. pmt_cpp::wait_first_ack::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.wait_first_ack_sptr_make(self)

    def history(self):
        """history(wait_first_ack_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.wait_first_ack_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(wait_first_ack_sptr self, int which, int delay)
        declare_sample_delay(wait_first_ack_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.wait_first_ack_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(wait_first_ack_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.wait_first_ack_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(wait_first_ack_sptr self) -> int"""
        return _pmt_cpp_swig.wait_first_ack_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(wait_first_ack_sptr self) -> double"""
        return _pmt_cpp_swig.wait_first_ack_sptr_relative_rate(self)

    def start(self):
        """start(wait_first_ack_sptr self) -> bool"""
        return _pmt_cpp_swig.wait_first_ack_sptr_start(self)

    def stop(self):
        """stop(wait_first_ack_sptr self) -> bool"""
        return _pmt_cpp_swig.wait_first_ack_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(wait_first_ack_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.wait_first_ack_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(wait_first_ack_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.wait_first_ack_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(wait_first_ack_sptr self) -> int"""
        return _pmt_cpp_swig.wait_first_ack_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(wait_first_ack_sptr self, int m)"""
        return _pmt_cpp_swig.wait_first_ack_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(wait_first_ack_sptr self)"""
        return _pmt_cpp_swig.wait_first_ack_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(wait_first_ack_sptr self) -> bool"""
        return _pmt_cpp_swig.wait_first_ack_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(wait_first_ack_sptr self, int m)"""
        return _pmt_cpp_swig.wait_first_ack_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(wait_first_ack_sptr self) -> int"""
        return _pmt_cpp_swig.wait_first_ack_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(wait_first_ack_sptr self, int i) -> long"""
        return _pmt_cpp_swig.wait_first_ack_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(wait_first_ack_sptr self, long max_output_buffer)
        set_max_output_buffer(wait_first_ack_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.wait_first_ack_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(wait_first_ack_sptr self, int i) -> long"""
        return _pmt_cpp_swig.wait_first_ack_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(wait_first_ack_sptr self, long min_output_buffer)
        set_min_output_buffer(wait_first_ack_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.wait_first_ack_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(wait_first_ack_sptr self) -> float"""
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(wait_first_ack_sptr self) -> float"""
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(wait_first_ack_sptr self) -> float"""
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(wait_first_ack_sptr self) -> float"""
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(wait_first_ack_sptr self) -> float"""
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(wait_first_ack_sptr self) -> float"""
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(wait_first_ack_sptr self, int which) -> float
        pc_input_buffers_full(wait_first_ack_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(wait_first_ack_sptr self, int which) -> float
        pc_input_buffers_full_avg(wait_first_ack_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(wait_first_ack_sptr self, int which) -> float
        pc_input_buffers_full_var(wait_first_ack_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(wait_first_ack_sptr self, int which) -> float
        pc_output_buffers_full(wait_first_ack_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(wait_first_ack_sptr self, int which) -> float
        pc_output_buffers_full_avg(wait_first_ack_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(wait_first_ack_sptr self, int which) -> float
        pc_output_buffers_full_var(wait_first_ack_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(wait_first_ack_sptr self) -> float"""
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(wait_first_ack_sptr self) -> float"""
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(wait_first_ack_sptr self) -> float"""
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(wait_first_ack_sptr self) -> float"""
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(wait_first_ack_sptr self) -> float"""
        return _pmt_cpp_swig.wait_first_ack_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(wait_first_ack_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.wait_first_ack_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(wait_first_ack_sptr self)"""
        return _pmt_cpp_swig.wait_first_ack_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(wait_first_ack_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.wait_first_ack_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(wait_first_ack_sptr self) -> int"""
        return _pmt_cpp_swig.wait_first_ack_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(wait_first_ack_sptr self) -> int"""
        return _pmt_cpp_swig.wait_first_ack_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(wait_first_ack_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.wait_first_ack_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(wait_first_ack_sptr self) -> std::string"""
        return _pmt_cpp_swig.wait_first_ack_sptr_name(self)

    def symbol_name(self):
        """symbol_name(wait_first_ack_sptr self) -> std::string"""
        return _pmt_cpp_swig.wait_first_ack_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(wait_first_ack_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.wait_first_ack_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(wait_first_ack_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.wait_first_ack_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(wait_first_ack_sptr self) -> long"""
        return _pmt_cpp_swig.wait_first_ack_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(wait_first_ack_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.wait_first_ack_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(wait_first_ack_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.wait_first_ack_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(wait_first_ack_sptr self) -> std::string"""
        return _pmt_cpp_swig.wait_first_ack_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(wait_first_ack_sptr self, std::string name)"""
        return _pmt_cpp_swig.wait_first_ack_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(wait_first_ack_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.wait_first_ack_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(wait_first_ack_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.wait_first_ack_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(wait_first_ack_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.wait_first_ack_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(wait_first_ack_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.wait_first_ack_sptr_message_subscribers(self, *args, **kwargs)

wait_first_ack_sptr_swigregister = _pmt_cpp_swig.wait_first_ack_sptr_swigregister
wait_first_ack_sptr_swigregister(wait_first_ack_sptr)

wait_first_ack_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
wait_first_ack = wait_first_ack.make;

class preprocessor_master(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> preprocessor_master_sptr

        Return a shared_ptr to a new instance of pmt_cpp::preprocessor_master.

        To avoid accidental use of raw pointers, pmt_cpp::preprocessor_master's constructor is in a private implementation class. pmt_cpp::preprocessor_master::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.preprocessor_master_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_preprocessor_master
    __del__ = lambda self : None;
preprocessor_master_swigregister = _pmt_cpp_swig.preprocessor_master_swigregister
preprocessor_master_swigregister(preprocessor_master)

def preprocessor_master_make():
  """
    preprocessor_master_make() -> preprocessor_master_sptr

    Return a shared_ptr to a new instance of pmt_cpp::preprocessor_master.

    To avoid accidental use of raw pointers, pmt_cpp::preprocessor_master's constructor is in a private implementation class. pmt_cpp::preprocessor_master::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.preprocessor_master_make()

class preprocessor_master_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::preprocessor_master)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::preprocessor_master)> self) -> preprocessor_master_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::preprocessor_master)> self, preprocessor_master p) -> preprocessor_master_sptr
        """
        this = _pmt_cpp_swig.new_preprocessor_master_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(preprocessor_master_sptr self) -> preprocessor_master"""
        return _pmt_cpp_swig.preprocessor_master_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_preprocessor_master_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(preprocessor_master_sptr self) -> preprocessor_master_sptr

        Return a shared_ptr to a new instance of pmt_cpp::preprocessor_master.

        To avoid accidental use of raw pointers, pmt_cpp::preprocessor_master's constructor is in a private implementation class. pmt_cpp::preprocessor_master::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.preprocessor_master_sptr_make(self)

    def history(self):
        """history(preprocessor_master_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.preprocessor_master_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(preprocessor_master_sptr self, int which, int delay)
        declare_sample_delay(preprocessor_master_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.preprocessor_master_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(preprocessor_master_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.preprocessor_master_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(preprocessor_master_sptr self) -> int"""
        return _pmt_cpp_swig.preprocessor_master_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(preprocessor_master_sptr self) -> double"""
        return _pmt_cpp_swig.preprocessor_master_sptr_relative_rate(self)

    def start(self):
        """start(preprocessor_master_sptr self) -> bool"""
        return _pmt_cpp_swig.preprocessor_master_sptr_start(self)

    def stop(self):
        """stop(preprocessor_master_sptr self) -> bool"""
        return _pmt_cpp_swig.preprocessor_master_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(preprocessor_master_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.preprocessor_master_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(preprocessor_master_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.preprocessor_master_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(preprocessor_master_sptr self) -> int"""
        return _pmt_cpp_swig.preprocessor_master_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(preprocessor_master_sptr self, int m)"""
        return _pmt_cpp_swig.preprocessor_master_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(preprocessor_master_sptr self)"""
        return _pmt_cpp_swig.preprocessor_master_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(preprocessor_master_sptr self) -> bool"""
        return _pmt_cpp_swig.preprocessor_master_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(preprocessor_master_sptr self, int m)"""
        return _pmt_cpp_swig.preprocessor_master_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(preprocessor_master_sptr self) -> int"""
        return _pmt_cpp_swig.preprocessor_master_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(preprocessor_master_sptr self, int i) -> long"""
        return _pmt_cpp_swig.preprocessor_master_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(preprocessor_master_sptr self, long max_output_buffer)
        set_max_output_buffer(preprocessor_master_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.preprocessor_master_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(preprocessor_master_sptr self, int i) -> long"""
        return _pmt_cpp_swig.preprocessor_master_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(preprocessor_master_sptr self, long min_output_buffer)
        set_min_output_buffer(preprocessor_master_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.preprocessor_master_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(preprocessor_master_sptr self) -> float"""
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(preprocessor_master_sptr self) -> float"""
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(preprocessor_master_sptr self) -> float"""
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(preprocessor_master_sptr self) -> float"""
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(preprocessor_master_sptr self) -> float"""
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(preprocessor_master_sptr self) -> float"""
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(preprocessor_master_sptr self, int which) -> float
        pc_input_buffers_full(preprocessor_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(preprocessor_master_sptr self, int which) -> float
        pc_input_buffers_full_avg(preprocessor_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(preprocessor_master_sptr self, int which) -> float
        pc_input_buffers_full_var(preprocessor_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(preprocessor_master_sptr self, int which) -> float
        pc_output_buffers_full(preprocessor_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(preprocessor_master_sptr self, int which) -> float
        pc_output_buffers_full_avg(preprocessor_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(preprocessor_master_sptr self, int which) -> float
        pc_output_buffers_full_var(preprocessor_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(preprocessor_master_sptr self) -> float"""
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(preprocessor_master_sptr self) -> float"""
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(preprocessor_master_sptr self) -> float"""
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(preprocessor_master_sptr self) -> float"""
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(preprocessor_master_sptr self) -> float"""
        return _pmt_cpp_swig.preprocessor_master_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(preprocessor_master_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.preprocessor_master_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(preprocessor_master_sptr self)"""
        return _pmt_cpp_swig.preprocessor_master_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(preprocessor_master_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.preprocessor_master_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(preprocessor_master_sptr self) -> int"""
        return _pmt_cpp_swig.preprocessor_master_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(preprocessor_master_sptr self) -> int"""
        return _pmt_cpp_swig.preprocessor_master_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(preprocessor_master_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.preprocessor_master_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(preprocessor_master_sptr self) -> std::string"""
        return _pmt_cpp_swig.preprocessor_master_sptr_name(self)

    def symbol_name(self):
        """symbol_name(preprocessor_master_sptr self) -> std::string"""
        return _pmt_cpp_swig.preprocessor_master_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(preprocessor_master_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.preprocessor_master_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(preprocessor_master_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.preprocessor_master_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(preprocessor_master_sptr self) -> long"""
        return _pmt_cpp_swig.preprocessor_master_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(preprocessor_master_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.preprocessor_master_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(preprocessor_master_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.preprocessor_master_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(preprocessor_master_sptr self) -> std::string"""
        return _pmt_cpp_swig.preprocessor_master_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(preprocessor_master_sptr self, std::string name)"""
        return _pmt_cpp_swig.preprocessor_master_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(preprocessor_master_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.preprocessor_master_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(preprocessor_master_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.preprocessor_master_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(preprocessor_master_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.preprocessor_master_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(preprocessor_master_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.preprocessor_master_sptr_message_subscribers(self, *args, **kwargs)

preprocessor_master_sptr_swigregister = _pmt_cpp_swig.preprocessor_master_sptr_swigregister
preprocessor_master_sptr_swigregister(preprocessor_master_sptr)

preprocessor_master_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
preprocessor_master = preprocessor_master.make;

class Noise(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> Noise_sptr

        Return a shared_ptr to a new instance of pmt_cpp::Noise.

        To avoid accidental use of raw pointers, pmt_cpp::Noise's constructor is in a private implementation class. pmt_cpp::Noise::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.Noise_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_Noise
    __del__ = lambda self : None;
Noise_swigregister = _pmt_cpp_swig.Noise_swigregister
Noise_swigregister(Noise)

def Noise_make():
  """
    Noise_make() -> Noise_sptr

    Return a shared_ptr to a new instance of pmt_cpp::Noise.

    To avoid accidental use of raw pointers, pmt_cpp::Noise's constructor is in a private implementation class. pmt_cpp::Noise::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.Noise_make()

class Noise_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::Noise)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::Noise)> self) -> Noise_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::Noise)> self, Noise p) -> Noise_sptr
        """
        this = _pmt_cpp_swig.new_Noise_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(Noise_sptr self) -> Noise"""
        return _pmt_cpp_swig.Noise_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_Noise_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(Noise_sptr self) -> Noise_sptr

        Return a shared_ptr to a new instance of pmt_cpp::Noise.

        To avoid accidental use of raw pointers, pmt_cpp::Noise's constructor is in a private implementation class. pmt_cpp::Noise::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.Noise_sptr_make(self)

    def history(self):
        """history(Noise_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.Noise_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(Noise_sptr self, int which, int delay)
        declare_sample_delay(Noise_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.Noise_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(Noise_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.Noise_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(Noise_sptr self) -> int"""
        return _pmt_cpp_swig.Noise_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(Noise_sptr self) -> double"""
        return _pmt_cpp_swig.Noise_sptr_relative_rate(self)

    def start(self):
        """start(Noise_sptr self) -> bool"""
        return _pmt_cpp_swig.Noise_sptr_start(self)

    def stop(self):
        """stop(Noise_sptr self) -> bool"""
        return _pmt_cpp_swig.Noise_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(Noise_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.Noise_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(Noise_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.Noise_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(Noise_sptr self) -> int"""
        return _pmt_cpp_swig.Noise_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(Noise_sptr self, int m)"""
        return _pmt_cpp_swig.Noise_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(Noise_sptr self)"""
        return _pmt_cpp_swig.Noise_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(Noise_sptr self) -> bool"""
        return _pmt_cpp_swig.Noise_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(Noise_sptr self, int m)"""
        return _pmt_cpp_swig.Noise_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(Noise_sptr self) -> int"""
        return _pmt_cpp_swig.Noise_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(Noise_sptr self, int i) -> long"""
        return _pmt_cpp_swig.Noise_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(Noise_sptr self, long max_output_buffer)
        set_max_output_buffer(Noise_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.Noise_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(Noise_sptr self, int i) -> long"""
        return _pmt_cpp_swig.Noise_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(Noise_sptr self, long min_output_buffer)
        set_min_output_buffer(Noise_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.Noise_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(Noise_sptr self) -> float"""
        return _pmt_cpp_swig.Noise_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(Noise_sptr self) -> float"""
        return _pmt_cpp_swig.Noise_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(Noise_sptr self) -> float"""
        return _pmt_cpp_swig.Noise_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(Noise_sptr self) -> float"""
        return _pmt_cpp_swig.Noise_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(Noise_sptr self) -> float"""
        return _pmt_cpp_swig.Noise_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(Noise_sptr self) -> float"""
        return _pmt_cpp_swig.Noise_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(Noise_sptr self, int which) -> float
        pc_input_buffers_full(Noise_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.Noise_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(Noise_sptr self, int which) -> float
        pc_input_buffers_full_avg(Noise_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.Noise_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(Noise_sptr self, int which) -> float
        pc_input_buffers_full_var(Noise_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.Noise_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(Noise_sptr self, int which) -> float
        pc_output_buffers_full(Noise_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.Noise_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(Noise_sptr self, int which) -> float
        pc_output_buffers_full_avg(Noise_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.Noise_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(Noise_sptr self, int which) -> float
        pc_output_buffers_full_var(Noise_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.Noise_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(Noise_sptr self) -> float"""
        return _pmt_cpp_swig.Noise_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(Noise_sptr self) -> float"""
        return _pmt_cpp_swig.Noise_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(Noise_sptr self) -> float"""
        return _pmt_cpp_swig.Noise_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(Noise_sptr self) -> float"""
        return _pmt_cpp_swig.Noise_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(Noise_sptr self) -> float"""
        return _pmt_cpp_swig.Noise_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(Noise_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.Noise_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(Noise_sptr self)"""
        return _pmt_cpp_swig.Noise_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(Noise_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.Noise_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(Noise_sptr self) -> int"""
        return _pmt_cpp_swig.Noise_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(Noise_sptr self) -> int"""
        return _pmt_cpp_swig.Noise_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(Noise_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.Noise_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(Noise_sptr self) -> std::string"""
        return _pmt_cpp_swig.Noise_sptr_name(self)

    def symbol_name(self):
        """symbol_name(Noise_sptr self) -> std::string"""
        return _pmt_cpp_swig.Noise_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(Noise_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.Noise_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(Noise_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.Noise_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(Noise_sptr self) -> long"""
        return _pmt_cpp_swig.Noise_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(Noise_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.Noise_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(Noise_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.Noise_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(Noise_sptr self) -> std::string"""
        return _pmt_cpp_swig.Noise_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(Noise_sptr self, std::string name)"""
        return _pmt_cpp_swig.Noise_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(Noise_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.Noise_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(Noise_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.Noise_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(Noise_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.Noise_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(Noise_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.Noise_sptr_message_subscribers(self, *args, **kwargs)

Noise_sptr_swigregister = _pmt_cpp_swig.Noise_sptr_swigregister
Noise_sptr_swigregister(Noise_sptr)

Noise_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
Noise = Noise.make;

class set_new_config_master(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> set_new_config_master_sptr

        Return a shared_ptr to a new instance of pmt_cpp::set_new_config_master.

        To avoid accidental use of raw pointers, pmt_cpp::set_new_config_master's constructor is in a private implementation class. pmt_cpp::set_new_config_master::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.set_new_config_master_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_set_new_config_master
    __del__ = lambda self : None;
set_new_config_master_swigregister = _pmt_cpp_swig.set_new_config_master_swigregister
set_new_config_master_swigregister(set_new_config_master)

def set_new_config_master_make():
  """
    set_new_config_master_make() -> set_new_config_master_sptr

    Return a shared_ptr to a new instance of pmt_cpp::set_new_config_master.

    To avoid accidental use of raw pointers, pmt_cpp::set_new_config_master's constructor is in a private implementation class. pmt_cpp::set_new_config_master::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.set_new_config_master_make()

class set_new_config_master_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::set_new_config_master)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::set_new_config_master)> self) -> set_new_config_master_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::set_new_config_master)> self, set_new_config_master p) -> set_new_config_master_sptr
        """
        this = _pmt_cpp_swig.new_set_new_config_master_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(set_new_config_master_sptr self) -> set_new_config_master"""
        return _pmt_cpp_swig.set_new_config_master_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_set_new_config_master_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(set_new_config_master_sptr self) -> set_new_config_master_sptr

        Return a shared_ptr to a new instance of pmt_cpp::set_new_config_master.

        To avoid accidental use of raw pointers, pmt_cpp::set_new_config_master's constructor is in a private implementation class. pmt_cpp::set_new_config_master::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.set_new_config_master_sptr_make(self)

    def history(self):
        """history(set_new_config_master_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.set_new_config_master_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(set_new_config_master_sptr self, int which, int delay)
        declare_sample_delay(set_new_config_master_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.set_new_config_master_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(set_new_config_master_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.set_new_config_master_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(set_new_config_master_sptr self) -> int"""
        return _pmt_cpp_swig.set_new_config_master_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(set_new_config_master_sptr self) -> double"""
        return _pmt_cpp_swig.set_new_config_master_sptr_relative_rate(self)

    def start(self):
        """start(set_new_config_master_sptr self) -> bool"""
        return _pmt_cpp_swig.set_new_config_master_sptr_start(self)

    def stop(self):
        """stop(set_new_config_master_sptr self) -> bool"""
        return _pmt_cpp_swig.set_new_config_master_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(set_new_config_master_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.set_new_config_master_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(set_new_config_master_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.set_new_config_master_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(set_new_config_master_sptr self) -> int"""
        return _pmt_cpp_swig.set_new_config_master_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(set_new_config_master_sptr self, int m)"""
        return _pmt_cpp_swig.set_new_config_master_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(set_new_config_master_sptr self)"""
        return _pmt_cpp_swig.set_new_config_master_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(set_new_config_master_sptr self) -> bool"""
        return _pmt_cpp_swig.set_new_config_master_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(set_new_config_master_sptr self, int m)"""
        return _pmt_cpp_swig.set_new_config_master_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(set_new_config_master_sptr self) -> int"""
        return _pmt_cpp_swig.set_new_config_master_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(set_new_config_master_sptr self, int i) -> long"""
        return _pmt_cpp_swig.set_new_config_master_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(set_new_config_master_sptr self, long max_output_buffer)
        set_max_output_buffer(set_new_config_master_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.set_new_config_master_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(set_new_config_master_sptr self, int i) -> long"""
        return _pmt_cpp_swig.set_new_config_master_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(set_new_config_master_sptr self, long min_output_buffer)
        set_min_output_buffer(set_new_config_master_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.set_new_config_master_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(set_new_config_master_sptr self) -> float"""
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(set_new_config_master_sptr self) -> float"""
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(set_new_config_master_sptr self) -> float"""
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(set_new_config_master_sptr self) -> float"""
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(set_new_config_master_sptr self) -> float"""
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(set_new_config_master_sptr self) -> float"""
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(set_new_config_master_sptr self, int which) -> float
        pc_input_buffers_full(set_new_config_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(set_new_config_master_sptr self, int which) -> float
        pc_input_buffers_full_avg(set_new_config_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(set_new_config_master_sptr self, int which) -> float
        pc_input_buffers_full_var(set_new_config_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(set_new_config_master_sptr self, int which) -> float
        pc_output_buffers_full(set_new_config_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(set_new_config_master_sptr self, int which) -> float
        pc_output_buffers_full_avg(set_new_config_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(set_new_config_master_sptr self, int which) -> float
        pc_output_buffers_full_var(set_new_config_master_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(set_new_config_master_sptr self) -> float"""
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(set_new_config_master_sptr self) -> float"""
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(set_new_config_master_sptr self) -> float"""
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(set_new_config_master_sptr self) -> float"""
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(set_new_config_master_sptr self) -> float"""
        return _pmt_cpp_swig.set_new_config_master_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(set_new_config_master_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.set_new_config_master_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(set_new_config_master_sptr self)"""
        return _pmt_cpp_swig.set_new_config_master_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(set_new_config_master_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.set_new_config_master_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(set_new_config_master_sptr self) -> int"""
        return _pmt_cpp_swig.set_new_config_master_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(set_new_config_master_sptr self) -> int"""
        return _pmt_cpp_swig.set_new_config_master_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(set_new_config_master_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.set_new_config_master_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(set_new_config_master_sptr self) -> std::string"""
        return _pmt_cpp_swig.set_new_config_master_sptr_name(self)

    def symbol_name(self):
        """symbol_name(set_new_config_master_sptr self) -> std::string"""
        return _pmt_cpp_swig.set_new_config_master_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(set_new_config_master_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.set_new_config_master_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(set_new_config_master_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.set_new_config_master_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(set_new_config_master_sptr self) -> long"""
        return _pmt_cpp_swig.set_new_config_master_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(set_new_config_master_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.set_new_config_master_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(set_new_config_master_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.set_new_config_master_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(set_new_config_master_sptr self) -> std::string"""
        return _pmt_cpp_swig.set_new_config_master_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(set_new_config_master_sptr self, std::string name)"""
        return _pmt_cpp_swig.set_new_config_master_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(set_new_config_master_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.set_new_config_master_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(set_new_config_master_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.set_new_config_master_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(set_new_config_master_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.set_new_config_master_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(set_new_config_master_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.set_new_config_master_sptr_message_subscribers(self, *args, **kwargs)

set_new_config_master_sptr_swigregister = _pmt_cpp_swig.set_new_config_master_sptr_swigregister
set_new_config_master_sptr_swigregister(set_new_config_master_sptr)

set_new_config_master_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
set_new_config_master = set_new_config_master.make;

class set_ccc(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> set_ccc_sptr

        Return a shared_ptr to a new instance of pmt_cpp::set_ccc.

        To avoid accidental use of raw pointers, pmt_cpp::set_ccc's constructor is in a private implementation class. pmt_cpp::set_ccc::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.set_ccc_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_set_ccc
    __del__ = lambda self : None;
set_ccc_swigregister = _pmt_cpp_swig.set_ccc_swigregister
set_ccc_swigregister(set_ccc)

def set_ccc_make():
  """
    set_ccc_make() -> set_ccc_sptr

    Return a shared_ptr to a new instance of pmt_cpp::set_ccc.

    To avoid accidental use of raw pointers, pmt_cpp::set_ccc's constructor is in a private implementation class. pmt_cpp::set_ccc::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.set_ccc_make()

class set_ccc_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::set_ccc)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::set_ccc)> self) -> set_ccc_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::set_ccc)> self, set_ccc p) -> set_ccc_sptr
        """
        this = _pmt_cpp_swig.new_set_ccc_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(set_ccc_sptr self) -> set_ccc"""
        return _pmt_cpp_swig.set_ccc_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_set_ccc_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(set_ccc_sptr self) -> set_ccc_sptr

        Return a shared_ptr to a new instance of pmt_cpp::set_ccc.

        To avoid accidental use of raw pointers, pmt_cpp::set_ccc's constructor is in a private implementation class. pmt_cpp::set_ccc::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.set_ccc_sptr_make(self)

    def history(self):
        """history(set_ccc_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.set_ccc_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(set_ccc_sptr self, int which, int delay)
        declare_sample_delay(set_ccc_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.set_ccc_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(set_ccc_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.set_ccc_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(set_ccc_sptr self) -> int"""
        return _pmt_cpp_swig.set_ccc_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(set_ccc_sptr self) -> double"""
        return _pmt_cpp_swig.set_ccc_sptr_relative_rate(self)

    def start(self):
        """start(set_ccc_sptr self) -> bool"""
        return _pmt_cpp_swig.set_ccc_sptr_start(self)

    def stop(self):
        """stop(set_ccc_sptr self) -> bool"""
        return _pmt_cpp_swig.set_ccc_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(set_ccc_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.set_ccc_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(set_ccc_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.set_ccc_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(set_ccc_sptr self) -> int"""
        return _pmt_cpp_swig.set_ccc_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(set_ccc_sptr self, int m)"""
        return _pmt_cpp_swig.set_ccc_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(set_ccc_sptr self)"""
        return _pmt_cpp_swig.set_ccc_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(set_ccc_sptr self) -> bool"""
        return _pmt_cpp_swig.set_ccc_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(set_ccc_sptr self, int m)"""
        return _pmt_cpp_swig.set_ccc_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(set_ccc_sptr self) -> int"""
        return _pmt_cpp_swig.set_ccc_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(set_ccc_sptr self, int i) -> long"""
        return _pmt_cpp_swig.set_ccc_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(set_ccc_sptr self, long max_output_buffer)
        set_max_output_buffer(set_ccc_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.set_ccc_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(set_ccc_sptr self, int i) -> long"""
        return _pmt_cpp_swig.set_ccc_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(set_ccc_sptr self, long min_output_buffer)
        set_min_output_buffer(set_ccc_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.set_ccc_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(set_ccc_sptr self) -> float"""
        return _pmt_cpp_swig.set_ccc_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(set_ccc_sptr self) -> float"""
        return _pmt_cpp_swig.set_ccc_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(set_ccc_sptr self) -> float"""
        return _pmt_cpp_swig.set_ccc_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(set_ccc_sptr self) -> float"""
        return _pmt_cpp_swig.set_ccc_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(set_ccc_sptr self) -> float"""
        return _pmt_cpp_swig.set_ccc_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(set_ccc_sptr self) -> float"""
        return _pmt_cpp_swig.set_ccc_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(set_ccc_sptr self, int which) -> float
        pc_input_buffers_full(set_ccc_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.set_ccc_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(set_ccc_sptr self, int which) -> float
        pc_input_buffers_full_avg(set_ccc_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.set_ccc_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(set_ccc_sptr self, int which) -> float
        pc_input_buffers_full_var(set_ccc_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.set_ccc_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(set_ccc_sptr self, int which) -> float
        pc_output_buffers_full(set_ccc_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.set_ccc_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(set_ccc_sptr self, int which) -> float
        pc_output_buffers_full_avg(set_ccc_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.set_ccc_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(set_ccc_sptr self, int which) -> float
        pc_output_buffers_full_var(set_ccc_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.set_ccc_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(set_ccc_sptr self) -> float"""
        return _pmt_cpp_swig.set_ccc_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(set_ccc_sptr self) -> float"""
        return _pmt_cpp_swig.set_ccc_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(set_ccc_sptr self) -> float"""
        return _pmt_cpp_swig.set_ccc_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(set_ccc_sptr self) -> float"""
        return _pmt_cpp_swig.set_ccc_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(set_ccc_sptr self) -> float"""
        return _pmt_cpp_swig.set_ccc_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(set_ccc_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.set_ccc_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(set_ccc_sptr self)"""
        return _pmt_cpp_swig.set_ccc_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(set_ccc_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.set_ccc_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(set_ccc_sptr self) -> int"""
        return _pmt_cpp_swig.set_ccc_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(set_ccc_sptr self) -> int"""
        return _pmt_cpp_swig.set_ccc_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(set_ccc_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.set_ccc_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(set_ccc_sptr self) -> std::string"""
        return _pmt_cpp_swig.set_ccc_sptr_name(self)

    def symbol_name(self):
        """symbol_name(set_ccc_sptr self) -> std::string"""
        return _pmt_cpp_swig.set_ccc_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(set_ccc_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.set_ccc_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(set_ccc_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.set_ccc_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(set_ccc_sptr self) -> long"""
        return _pmt_cpp_swig.set_ccc_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(set_ccc_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.set_ccc_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(set_ccc_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.set_ccc_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(set_ccc_sptr self) -> std::string"""
        return _pmt_cpp_swig.set_ccc_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(set_ccc_sptr self, std::string name)"""
        return _pmt_cpp_swig.set_ccc_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(set_ccc_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.set_ccc_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(set_ccc_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.set_ccc_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(set_ccc_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.set_ccc_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(set_ccc_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.set_ccc_sptr_message_subscribers(self, *args, **kwargs)

set_ccc_sptr_swigregister = _pmt_cpp_swig.set_ccc_sptr_swigregister
set_ccc_sptr_swigregister(set_ccc_sptr)

set_ccc_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
set_ccc = set_ccc.make;

class transmission_data(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> transmission_data_sptr

        Return a shared_ptr to a new instance of pmt_cpp::transmission_data.

        To avoid accidental use of raw pointers, pmt_cpp::transmission_data's constructor is in a private implementation class. pmt_cpp::transmission_data::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.transmission_data_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_transmission_data
    __del__ = lambda self : None;
transmission_data_swigregister = _pmt_cpp_swig.transmission_data_swigregister
transmission_data_swigregister(transmission_data)

def transmission_data_make():
  """
    transmission_data_make() -> transmission_data_sptr

    Return a shared_ptr to a new instance of pmt_cpp::transmission_data.

    To avoid accidental use of raw pointers, pmt_cpp::transmission_data's constructor is in a private implementation class. pmt_cpp::transmission_data::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.transmission_data_make()

class transmission_data_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::transmission_data)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::transmission_data)> self) -> transmission_data_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::transmission_data)> self, transmission_data p) -> transmission_data_sptr
        """
        this = _pmt_cpp_swig.new_transmission_data_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(transmission_data_sptr self) -> transmission_data"""
        return _pmt_cpp_swig.transmission_data_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_transmission_data_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(transmission_data_sptr self) -> transmission_data_sptr

        Return a shared_ptr to a new instance of pmt_cpp::transmission_data.

        To avoid accidental use of raw pointers, pmt_cpp::transmission_data's constructor is in a private implementation class. pmt_cpp::transmission_data::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.transmission_data_sptr_make(self)

    def history(self):
        """history(transmission_data_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.transmission_data_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(transmission_data_sptr self, int which, int delay)
        declare_sample_delay(transmission_data_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.transmission_data_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(transmission_data_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.transmission_data_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(transmission_data_sptr self) -> int"""
        return _pmt_cpp_swig.transmission_data_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(transmission_data_sptr self) -> double"""
        return _pmt_cpp_swig.transmission_data_sptr_relative_rate(self)

    def start(self):
        """start(transmission_data_sptr self) -> bool"""
        return _pmt_cpp_swig.transmission_data_sptr_start(self)

    def stop(self):
        """stop(transmission_data_sptr self) -> bool"""
        return _pmt_cpp_swig.transmission_data_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(transmission_data_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.transmission_data_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(transmission_data_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.transmission_data_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(transmission_data_sptr self) -> int"""
        return _pmt_cpp_swig.transmission_data_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(transmission_data_sptr self, int m)"""
        return _pmt_cpp_swig.transmission_data_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(transmission_data_sptr self)"""
        return _pmt_cpp_swig.transmission_data_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(transmission_data_sptr self) -> bool"""
        return _pmt_cpp_swig.transmission_data_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(transmission_data_sptr self, int m)"""
        return _pmt_cpp_swig.transmission_data_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(transmission_data_sptr self) -> int"""
        return _pmt_cpp_swig.transmission_data_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(transmission_data_sptr self, int i) -> long"""
        return _pmt_cpp_swig.transmission_data_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(transmission_data_sptr self, long max_output_buffer)
        set_max_output_buffer(transmission_data_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.transmission_data_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(transmission_data_sptr self, int i) -> long"""
        return _pmt_cpp_swig.transmission_data_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(transmission_data_sptr self, long min_output_buffer)
        set_min_output_buffer(transmission_data_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.transmission_data_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(transmission_data_sptr self) -> float"""
        return _pmt_cpp_swig.transmission_data_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(transmission_data_sptr self) -> float"""
        return _pmt_cpp_swig.transmission_data_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(transmission_data_sptr self) -> float"""
        return _pmt_cpp_swig.transmission_data_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(transmission_data_sptr self) -> float"""
        return _pmt_cpp_swig.transmission_data_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(transmission_data_sptr self) -> float"""
        return _pmt_cpp_swig.transmission_data_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(transmission_data_sptr self) -> float"""
        return _pmt_cpp_swig.transmission_data_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(transmission_data_sptr self, int which) -> float
        pc_input_buffers_full(transmission_data_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.transmission_data_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(transmission_data_sptr self, int which) -> float
        pc_input_buffers_full_avg(transmission_data_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.transmission_data_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(transmission_data_sptr self, int which) -> float
        pc_input_buffers_full_var(transmission_data_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.transmission_data_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(transmission_data_sptr self, int which) -> float
        pc_output_buffers_full(transmission_data_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.transmission_data_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(transmission_data_sptr self, int which) -> float
        pc_output_buffers_full_avg(transmission_data_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.transmission_data_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(transmission_data_sptr self, int which) -> float
        pc_output_buffers_full_var(transmission_data_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.transmission_data_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(transmission_data_sptr self) -> float"""
        return _pmt_cpp_swig.transmission_data_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(transmission_data_sptr self) -> float"""
        return _pmt_cpp_swig.transmission_data_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(transmission_data_sptr self) -> float"""
        return _pmt_cpp_swig.transmission_data_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(transmission_data_sptr self) -> float"""
        return _pmt_cpp_swig.transmission_data_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(transmission_data_sptr self) -> float"""
        return _pmt_cpp_swig.transmission_data_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(transmission_data_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.transmission_data_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(transmission_data_sptr self)"""
        return _pmt_cpp_swig.transmission_data_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(transmission_data_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.transmission_data_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(transmission_data_sptr self) -> int"""
        return _pmt_cpp_swig.transmission_data_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(transmission_data_sptr self) -> int"""
        return _pmt_cpp_swig.transmission_data_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(transmission_data_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.transmission_data_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(transmission_data_sptr self) -> std::string"""
        return _pmt_cpp_swig.transmission_data_sptr_name(self)

    def symbol_name(self):
        """symbol_name(transmission_data_sptr self) -> std::string"""
        return _pmt_cpp_swig.transmission_data_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(transmission_data_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.transmission_data_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(transmission_data_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.transmission_data_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(transmission_data_sptr self) -> long"""
        return _pmt_cpp_swig.transmission_data_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(transmission_data_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.transmission_data_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(transmission_data_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.transmission_data_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(transmission_data_sptr self) -> std::string"""
        return _pmt_cpp_swig.transmission_data_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(transmission_data_sptr self, std::string name)"""
        return _pmt_cpp_swig.transmission_data_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(transmission_data_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.transmission_data_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(transmission_data_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.transmission_data_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(transmission_data_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.transmission_data_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(transmission_data_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.transmission_data_sptr_message_subscribers(self, *args, **kwargs)

transmission_data_sptr_swigregister = _pmt_cpp_swig.transmission_data_sptr_swigregister
transmission_data_sptr_swigregister(transmission_data_sptr)

transmission_data_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
transmission_data = transmission_data.make;

class time_transmission_cycle(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> time_transmission_cycle_sptr

        Return a shared_ptr to a new instance of pmt_cpp::time_transmission_cycle.

        To avoid accidental use of raw pointers, pmt_cpp::time_transmission_cycle's constructor is in a private implementation class. pmt_cpp::time_transmission_cycle::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.time_transmission_cycle_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_time_transmission_cycle
    __del__ = lambda self : None;
time_transmission_cycle_swigregister = _pmt_cpp_swig.time_transmission_cycle_swigregister
time_transmission_cycle_swigregister(time_transmission_cycle)

def time_transmission_cycle_make():
  """
    time_transmission_cycle_make() -> time_transmission_cycle_sptr

    Return a shared_ptr to a new instance of pmt_cpp::time_transmission_cycle.

    To avoid accidental use of raw pointers, pmt_cpp::time_transmission_cycle's constructor is in a private implementation class. pmt_cpp::time_transmission_cycle::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.time_transmission_cycle_make()

class time_transmission_cycle_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::time_transmission_cycle)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::time_transmission_cycle)> self) -> time_transmission_cycle_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::time_transmission_cycle)> self, time_transmission_cycle p) -> time_transmission_cycle_sptr
        """
        this = _pmt_cpp_swig.new_time_transmission_cycle_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(time_transmission_cycle_sptr self) -> time_transmission_cycle"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_time_transmission_cycle_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(time_transmission_cycle_sptr self) -> time_transmission_cycle_sptr

        Return a shared_ptr to a new instance of pmt_cpp::time_transmission_cycle.

        To avoid accidental use of raw pointers, pmt_cpp::time_transmission_cycle's constructor is in a private implementation class. pmt_cpp::time_transmission_cycle::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.time_transmission_cycle_sptr_make(self)

    def history(self):
        """history(time_transmission_cycle_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(time_transmission_cycle_sptr self, int which, int delay)
        declare_sample_delay(time_transmission_cycle_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.time_transmission_cycle_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(time_transmission_cycle_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(time_transmission_cycle_sptr self) -> int"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(time_transmission_cycle_sptr self) -> double"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_relative_rate(self)

    def start(self):
        """start(time_transmission_cycle_sptr self) -> bool"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_start(self)

    def stop(self):
        """stop(time_transmission_cycle_sptr self) -> bool"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(time_transmission_cycle_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(time_transmission_cycle_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(time_transmission_cycle_sptr self) -> int"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(time_transmission_cycle_sptr self, int m)"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(time_transmission_cycle_sptr self)"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(time_transmission_cycle_sptr self) -> bool"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(time_transmission_cycle_sptr self, int m)"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(time_transmission_cycle_sptr self) -> int"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(time_transmission_cycle_sptr self, int i) -> long"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(time_transmission_cycle_sptr self, long max_output_buffer)
        set_max_output_buffer(time_transmission_cycle_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.time_transmission_cycle_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(time_transmission_cycle_sptr self, int i) -> long"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(time_transmission_cycle_sptr self, long min_output_buffer)
        set_min_output_buffer(time_transmission_cycle_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.time_transmission_cycle_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(time_transmission_cycle_sptr self) -> float"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(time_transmission_cycle_sptr self) -> float"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(time_transmission_cycle_sptr self) -> float"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(time_transmission_cycle_sptr self) -> float"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(time_transmission_cycle_sptr self) -> float"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(time_transmission_cycle_sptr self) -> float"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(time_transmission_cycle_sptr self, int which) -> float
        pc_input_buffers_full(time_transmission_cycle_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(time_transmission_cycle_sptr self, int which) -> float
        pc_input_buffers_full_avg(time_transmission_cycle_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(time_transmission_cycle_sptr self, int which) -> float
        pc_input_buffers_full_var(time_transmission_cycle_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(time_transmission_cycle_sptr self, int which) -> float
        pc_output_buffers_full(time_transmission_cycle_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(time_transmission_cycle_sptr self, int which) -> float
        pc_output_buffers_full_avg(time_transmission_cycle_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(time_transmission_cycle_sptr self, int which) -> float
        pc_output_buffers_full_var(time_transmission_cycle_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(time_transmission_cycle_sptr self) -> float"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(time_transmission_cycle_sptr self) -> float"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(time_transmission_cycle_sptr self) -> float"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(time_transmission_cycle_sptr self) -> float"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(time_transmission_cycle_sptr self) -> float"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(time_transmission_cycle_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(time_transmission_cycle_sptr self)"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(time_transmission_cycle_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(time_transmission_cycle_sptr self) -> int"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(time_transmission_cycle_sptr self) -> int"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(time_transmission_cycle_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(time_transmission_cycle_sptr self) -> std::string"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_name(self)

    def symbol_name(self):
        """symbol_name(time_transmission_cycle_sptr self) -> std::string"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(time_transmission_cycle_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(time_transmission_cycle_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(time_transmission_cycle_sptr self) -> long"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(time_transmission_cycle_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(time_transmission_cycle_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(time_transmission_cycle_sptr self) -> std::string"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(time_transmission_cycle_sptr self, std::string name)"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(time_transmission_cycle_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(time_transmission_cycle_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(time_transmission_cycle_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(time_transmission_cycle_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.time_transmission_cycle_sptr_message_subscribers(self, *args, **kwargs)

time_transmission_cycle_sptr_swigregister = _pmt_cpp_swig.time_transmission_cycle_sptr_swigregister
time_transmission_cycle_sptr_swigregister(time_transmission_cycle_sptr)

time_transmission_cycle_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
time_transmission_cycle = time_transmission_cycle.make;

class timer(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> timer_sptr

        Return a shared_ptr to a new instance of pmt_cpp::timer.

        To avoid accidental use of raw pointers, pmt_cpp::timer's constructor is in a private implementation class. pmt_cpp::timer::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.timer_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_timer
    __del__ = lambda self : None;
timer_swigregister = _pmt_cpp_swig.timer_swigregister
timer_swigregister(timer)

def timer_make():
  """
    timer_make() -> timer_sptr

    Return a shared_ptr to a new instance of pmt_cpp::timer.

    To avoid accidental use of raw pointers, pmt_cpp::timer's constructor is in a private implementation class. pmt_cpp::timer::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.timer_make()

class timer_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::timer)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::timer)> self) -> timer_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::timer)> self, timer p) -> timer_sptr
        """
        this = _pmt_cpp_swig.new_timer_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(timer_sptr self) -> timer"""
        return _pmt_cpp_swig.timer_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_timer_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(timer_sptr self) -> timer_sptr

        Return a shared_ptr to a new instance of pmt_cpp::timer.

        To avoid accidental use of raw pointers, pmt_cpp::timer's constructor is in a private implementation class. pmt_cpp::timer::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.timer_sptr_make(self)

    def history(self):
        """history(timer_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.timer_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(timer_sptr self, int which, int delay)
        declare_sample_delay(timer_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.timer_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(timer_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.timer_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(timer_sptr self) -> int"""
        return _pmt_cpp_swig.timer_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(timer_sptr self) -> double"""
        return _pmt_cpp_swig.timer_sptr_relative_rate(self)

    def start(self):
        """start(timer_sptr self) -> bool"""
        return _pmt_cpp_swig.timer_sptr_start(self)

    def stop(self):
        """stop(timer_sptr self) -> bool"""
        return _pmt_cpp_swig.timer_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(timer_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.timer_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(timer_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.timer_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(timer_sptr self) -> int"""
        return _pmt_cpp_swig.timer_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(timer_sptr self, int m)"""
        return _pmt_cpp_swig.timer_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(timer_sptr self)"""
        return _pmt_cpp_swig.timer_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(timer_sptr self) -> bool"""
        return _pmt_cpp_swig.timer_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(timer_sptr self, int m)"""
        return _pmt_cpp_swig.timer_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(timer_sptr self) -> int"""
        return _pmt_cpp_swig.timer_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(timer_sptr self, int i) -> long"""
        return _pmt_cpp_swig.timer_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(timer_sptr self, long max_output_buffer)
        set_max_output_buffer(timer_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.timer_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(timer_sptr self, int i) -> long"""
        return _pmt_cpp_swig.timer_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(timer_sptr self, long min_output_buffer)
        set_min_output_buffer(timer_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.timer_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(timer_sptr self) -> float"""
        return _pmt_cpp_swig.timer_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(timer_sptr self) -> float"""
        return _pmt_cpp_swig.timer_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(timer_sptr self) -> float"""
        return _pmt_cpp_swig.timer_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(timer_sptr self) -> float"""
        return _pmt_cpp_swig.timer_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(timer_sptr self) -> float"""
        return _pmt_cpp_swig.timer_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(timer_sptr self) -> float"""
        return _pmt_cpp_swig.timer_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(timer_sptr self, int which) -> float
        pc_input_buffers_full(timer_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.timer_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(timer_sptr self, int which) -> float
        pc_input_buffers_full_avg(timer_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.timer_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(timer_sptr self, int which) -> float
        pc_input_buffers_full_var(timer_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.timer_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(timer_sptr self, int which) -> float
        pc_output_buffers_full(timer_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.timer_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(timer_sptr self, int which) -> float
        pc_output_buffers_full_avg(timer_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.timer_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(timer_sptr self, int which) -> float
        pc_output_buffers_full_var(timer_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.timer_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(timer_sptr self) -> float"""
        return _pmt_cpp_swig.timer_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(timer_sptr self) -> float"""
        return _pmt_cpp_swig.timer_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(timer_sptr self) -> float"""
        return _pmt_cpp_swig.timer_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(timer_sptr self) -> float"""
        return _pmt_cpp_swig.timer_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(timer_sptr self) -> float"""
        return _pmt_cpp_swig.timer_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(timer_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.timer_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(timer_sptr self)"""
        return _pmt_cpp_swig.timer_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(timer_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.timer_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(timer_sptr self) -> int"""
        return _pmt_cpp_swig.timer_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(timer_sptr self) -> int"""
        return _pmt_cpp_swig.timer_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(timer_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.timer_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(timer_sptr self) -> std::string"""
        return _pmt_cpp_swig.timer_sptr_name(self)

    def symbol_name(self):
        """symbol_name(timer_sptr self) -> std::string"""
        return _pmt_cpp_swig.timer_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(timer_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.timer_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(timer_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.timer_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(timer_sptr self) -> long"""
        return _pmt_cpp_swig.timer_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(timer_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.timer_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(timer_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.timer_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(timer_sptr self) -> std::string"""
        return _pmt_cpp_swig.timer_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(timer_sptr self, std::string name)"""
        return _pmt_cpp_swig.timer_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(timer_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.timer_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(timer_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.timer_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(timer_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.timer_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(timer_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.timer_sptr_message_subscribers(self, *args, **kwargs)

timer_sptr_swigregister = _pmt_cpp_swig.timer_sptr_swigregister
timer_sptr_swigregister(timer_sptr)

timer_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
timer = timer.make;

class ahp(object):
    """<+description of block+>"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def make():
        """
        make() -> ahp_sptr

        Return a shared_ptr to a new instance of pmt_cpp::ahp.

        To avoid accidental use of raw pointers, pmt_cpp::ahp's constructor is in a private implementation class. pmt_cpp::ahp::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.ahp_make()

    make = staticmethod(make)
    __swig_destroy__ = _pmt_cpp_swig.delete_ahp
    __del__ = lambda self : None;
ahp_swigregister = _pmt_cpp_swig.ahp_swigregister
ahp_swigregister(ahp)

def ahp_make():
  """
    ahp_make() -> ahp_sptr

    Return a shared_ptr to a new instance of pmt_cpp::ahp.

    To avoid accidental use of raw pointers, pmt_cpp::ahp's constructor is in a private implementation class. pmt_cpp::ahp::make is the public interface for creating new instances.

    Params: (NONE)
    """
  return _pmt_cpp_swig.ahp_make()

class ahp_sptr(object):
    """Proxy of C++ boost::shared_ptr<(gr::pmt_cpp::ahp)> class"""
    thisown = _swig_property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc='The membership flag')
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(boost::shared_ptr<(gr::pmt_cpp::ahp)> self) -> ahp_sptr
        __init__(boost::shared_ptr<(gr::pmt_cpp::ahp)> self, ahp p) -> ahp_sptr
        """
        this = _pmt_cpp_swig.new_ahp_sptr(*args)
        try: self.this.append(this)
        except: self.this = this
    def __deref__(self):
        """__deref__(ahp_sptr self) -> ahp"""
        return _pmt_cpp_swig.ahp_sptr___deref__(self)

    __swig_destroy__ = _pmt_cpp_swig.delete_ahp_sptr
    __del__ = lambda self : None;
    def make(self):
        """
        make(ahp_sptr self) -> ahp_sptr

        Return a shared_ptr to a new instance of pmt_cpp::ahp.

        To avoid accidental use of raw pointers, pmt_cpp::ahp's constructor is in a private implementation class. pmt_cpp::ahp::make is the public interface for creating new instances.

        Params: (NONE)
        """
        return _pmt_cpp_swig.ahp_sptr_make(self)

    def history(self):
        """history(ahp_sptr self) -> unsigned int"""
        return _pmt_cpp_swig.ahp_sptr_history(self)

    def declare_sample_delay(self, *args):
        """
        declare_sample_delay(ahp_sptr self, int which, int delay)
        declare_sample_delay(ahp_sptr self, unsigned int delay)
        """
        return _pmt_cpp_swig.ahp_sptr_declare_sample_delay(self, *args)

    def sample_delay(self, *args, **kwargs):
        """sample_delay(ahp_sptr self, int which) -> unsigned int"""
        return _pmt_cpp_swig.ahp_sptr_sample_delay(self, *args, **kwargs)

    def output_multiple(self):
        """output_multiple(ahp_sptr self) -> int"""
        return _pmt_cpp_swig.ahp_sptr_output_multiple(self)

    def relative_rate(self):
        """relative_rate(ahp_sptr self) -> double"""
        return _pmt_cpp_swig.ahp_sptr_relative_rate(self)

    def start(self):
        """start(ahp_sptr self) -> bool"""
        return _pmt_cpp_swig.ahp_sptr_start(self)

    def stop(self):
        """stop(ahp_sptr self) -> bool"""
        return _pmt_cpp_swig.ahp_sptr_stop(self)

    def nitems_read(self, *args, **kwargs):
        """nitems_read(ahp_sptr self, unsigned int which_input) -> uint64_t"""
        return _pmt_cpp_swig.ahp_sptr_nitems_read(self, *args, **kwargs)

    def nitems_written(self, *args, **kwargs):
        """nitems_written(ahp_sptr self, unsigned int which_output) -> uint64_t"""
        return _pmt_cpp_swig.ahp_sptr_nitems_written(self, *args, **kwargs)

    def max_noutput_items(self):
        """max_noutput_items(ahp_sptr self) -> int"""
        return _pmt_cpp_swig.ahp_sptr_max_noutput_items(self)

    def set_max_noutput_items(self, *args, **kwargs):
        """set_max_noutput_items(ahp_sptr self, int m)"""
        return _pmt_cpp_swig.ahp_sptr_set_max_noutput_items(self, *args, **kwargs)

    def unset_max_noutput_items(self):
        """unset_max_noutput_items(ahp_sptr self)"""
        return _pmt_cpp_swig.ahp_sptr_unset_max_noutput_items(self)

    def is_set_max_noutput_items(self):
        """is_set_max_noutput_items(ahp_sptr self) -> bool"""
        return _pmt_cpp_swig.ahp_sptr_is_set_max_noutput_items(self)

    def set_min_noutput_items(self, *args, **kwargs):
        """set_min_noutput_items(ahp_sptr self, int m)"""
        return _pmt_cpp_swig.ahp_sptr_set_min_noutput_items(self, *args, **kwargs)

    def min_noutput_items(self):
        """min_noutput_items(ahp_sptr self) -> int"""
        return _pmt_cpp_swig.ahp_sptr_min_noutput_items(self)

    def max_output_buffer(self, *args, **kwargs):
        """max_output_buffer(ahp_sptr self, int i) -> long"""
        return _pmt_cpp_swig.ahp_sptr_max_output_buffer(self, *args, **kwargs)

    def set_max_output_buffer(self, *args):
        """
        set_max_output_buffer(ahp_sptr self, long max_output_buffer)
        set_max_output_buffer(ahp_sptr self, int port, long max_output_buffer)
        """
        return _pmt_cpp_swig.ahp_sptr_set_max_output_buffer(self, *args)

    def min_output_buffer(self, *args, **kwargs):
        """min_output_buffer(ahp_sptr self, int i) -> long"""
        return _pmt_cpp_swig.ahp_sptr_min_output_buffer(self, *args, **kwargs)

    def set_min_output_buffer(self, *args):
        """
        set_min_output_buffer(ahp_sptr self, long min_output_buffer)
        set_min_output_buffer(ahp_sptr self, int port, long min_output_buffer)
        """
        return _pmt_cpp_swig.ahp_sptr_set_min_output_buffer(self, *args)

    def pc_noutput_items(self):
        """pc_noutput_items(ahp_sptr self) -> float"""
        return _pmt_cpp_swig.ahp_sptr_pc_noutput_items(self)

    def pc_noutput_items_avg(self):
        """pc_noutput_items_avg(ahp_sptr self) -> float"""
        return _pmt_cpp_swig.ahp_sptr_pc_noutput_items_avg(self)

    def pc_noutput_items_var(self):
        """pc_noutput_items_var(ahp_sptr self) -> float"""
        return _pmt_cpp_swig.ahp_sptr_pc_noutput_items_var(self)

    def pc_nproduced(self):
        """pc_nproduced(ahp_sptr self) -> float"""
        return _pmt_cpp_swig.ahp_sptr_pc_nproduced(self)

    def pc_nproduced_avg(self):
        """pc_nproduced_avg(ahp_sptr self) -> float"""
        return _pmt_cpp_swig.ahp_sptr_pc_nproduced_avg(self)

    def pc_nproduced_var(self):
        """pc_nproduced_var(ahp_sptr self) -> float"""
        return _pmt_cpp_swig.ahp_sptr_pc_nproduced_var(self)

    def pc_input_buffers_full(self, *args):
        """
        pc_input_buffers_full(ahp_sptr self, int which) -> float
        pc_input_buffers_full(ahp_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.ahp_sptr_pc_input_buffers_full(self, *args)

    def pc_input_buffers_full_avg(self, *args):
        """
        pc_input_buffers_full_avg(ahp_sptr self, int which) -> float
        pc_input_buffers_full_avg(ahp_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.ahp_sptr_pc_input_buffers_full_avg(self, *args)

    def pc_input_buffers_full_var(self, *args):
        """
        pc_input_buffers_full_var(ahp_sptr self, int which) -> float
        pc_input_buffers_full_var(ahp_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.ahp_sptr_pc_input_buffers_full_var(self, *args)

    def pc_output_buffers_full(self, *args):
        """
        pc_output_buffers_full(ahp_sptr self, int which) -> float
        pc_output_buffers_full(ahp_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.ahp_sptr_pc_output_buffers_full(self, *args)

    def pc_output_buffers_full_avg(self, *args):
        """
        pc_output_buffers_full_avg(ahp_sptr self, int which) -> float
        pc_output_buffers_full_avg(ahp_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.ahp_sptr_pc_output_buffers_full_avg(self, *args)

    def pc_output_buffers_full_var(self, *args):
        """
        pc_output_buffers_full_var(ahp_sptr self, int which) -> float
        pc_output_buffers_full_var(ahp_sptr self) -> pmt_vector_float
        """
        return _pmt_cpp_swig.ahp_sptr_pc_output_buffers_full_var(self, *args)

    def pc_work_time(self):
        """pc_work_time(ahp_sptr self) -> float"""
        return _pmt_cpp_swig.ahp_sptr_pc_work_time(self)

    def pc_work_time_avg(self):
        """pc_work_time_avg(ahp_sptr self) -> float"""
        return _pmt_cpp_swig.ahp_sptr_pc_work_time_avg(self)

    def pc_work_time_var(self):
        """pc_work_time_var(ahp_sptr self) -> float"""
        return _pmt_cpp_swig.ahp_sptr_pc_work_time_var(self)

    def pc_work_time_total(self):
        """pc_work_time_total(ahp_sptr self) -> float"""
        return _pmt_cpp_swig.ahp_sptr_pc_work_time_total(self)

    def pc_throughput_avg(self):
        """pc_throughput_avg(ahp_sptr self) -> float"""
        return _pmt_cpp_swig.ahp_sptr_pc_throughput_avg(self)

    def set_processor_affinity(self, *args, **kwargs):
        """set_processor_affinity(ahp_sptr self, std::vector< int,std::allocator< int > > const & mask)"""
        return _pmt_cpp_swig.ahp_sptr_set_processor_affinity(self, *args, **kwargs)

    def unset_processor_affinity(self):
        """unset_processor_affinity(ahp_sptr self)"""
        return _pmt_cpp_swig.ahp_sptr_unset_processor_affinity(self)

    def processor_affinity(self):
        """processor_affinity(ahp_sptr self) -> std::vector< int,std::allocator< int > >"""
        return _pmt_cpp_swig.ahp_sptr_processor_affinity(self)

    def active_thread_priority(self):
        """active_thread_priority(ahp_sptr self) -> int"""
        return _pmt_cpp_swig.ahp_sptr_active_thread_priority(self)

    def thread_priority(self):
        """thread_priority(ahp_sptr self) -> int"""
        return _pmt_cpp_swig.ahp_sptr_thread_priority(self)

    def set_thread_priority(self, *args, **kwargs):
        """set_thread_priority(ahp_sptr self, int priority) -> int"""
        return _pmt_cpp_swig.ahp_sptr_set_thread_priority(self, *args, **kwargs)

    def name(self):
        """name(ahp_sptr self) -> std::string"""
        return _pmt_cpp_swig.ahp_sptr_name(self)

    def symbol_name(self):
        """symbol_name(ahp_sptr self) -> std::string"""
        return _pmt_cpp_swig.ahp_sptr_symbol_name(self)

    def input_signature(self):
        """input_signature(ahp_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.ahp_sptr_input_signature(self)

    def output_signature(self):
        """output_signature(ahp_sptr self) -> io_signature_sptr"""
        return _pmt_cpp_swig.ahp_sptr_output_signature(self)

    def unique_id(self):
        """unique_id(ahp_sptr self) -> long"""
        return _pmt_cpp_swig.ahp_sptr_unique_id(self)

    def to_basic_block(self):
        """to_basic_block(ahp_sptr self) -> basic_block_sptr"""
        return _pmt_cpp_swig.ahp_sptr_to_basic_block(self)

    def check_topology(self, *args, **kwargs):
        """check_topology(ahp_sptr self, int ninputs, int noutputs) -> bool"""
        return _pmt_cpp_swig.ahp_sptr_check_topology(self, *args, **kwargs)

    def alias(self):
        """alias(ahp_sptr self) -> std::string"""
        return _pmt_cpp_swig.ahp_sptr_alias(self)

    def set_block_alias(self, *args, **kwargs):
        """set_block_alias(ahp_sptr self, std::string name)"""
        return _pmt_cpp_swig.ahp_sptr_set_block_alias(self, *args, **kwargs)

    def _post(self, *args, **kwargs):
        """_post(ahp_sptr self, swig_int_ptr which_port, swig_int_ptr msg)"""
        return _pmt_cpp_swig.ahp_sptr__post(self, *args, **kwargs)

    def message_ports_in(self):
        """message_ports_in(ahp_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.ahp_sptr_message_ports_in(self)

    def message_ports_out(self):
        """message_ports_out(ahp_sptr self) -> swig_int_ptr"""
        return _pmt_cpp_swig.ahp_sptr_message_ports_out(self)

    def message_subscribers(self, *args, **kwargs):
        """message_subscribers(ahp_sptr self, swig_int_ptr which_port) -> swig_int_ptr"""
        return _pmt_cpp_swig.ahp_sptr_message_subscribers(self, *args, **kwargs)

ahp_sptr_swigregister = _pmt_cpp_swig.ahp_sptr_swigregister
ahp_sptr_swigregister(ahp_sptr)

ahp_sptr.__repr__ = lambda self: "<gr_block %s (%d)>" % (self.name(), self.unique_id())
ahp = ahp.make;



